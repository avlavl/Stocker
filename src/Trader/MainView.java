/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trader;

import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author zhangxr
 */
public class MainView extends javax.swing.JFrame {

    public class CheckData {

        public CheckData(String m, String para) {
            mode = m;
            parameter = para;
        }
        public String mode;
        public String parameter;
        public String status;
        public int days;
        public double key;
        public double percent;
        public String amount;
    }

    /**
     * Creates new form StockerView
     */
    public MainView() {
        initComponents();
        setLocationRelativeTo(null);
        final URL filename = getClass().getResource("/resource/Livermore1.jpg");
        if (filename != null) {
            setIconImage(new ImageIcon(filename, "Icon").getImage());
        }

        importFile(fileIn);
        importFile2(fileIn2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemClear = new javax.swing.JMenuItem();
        buttonGroupMACD = new javax.swing.ButtonGroup();
        buttonGroupMacdAdd = new javax.swing.ButtonGroup();
        buttonGroupLM = new javax.swing.ButtonGroup();
        jPanelMain = new javax.swing.JPanel();
        jLabelStockName = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePoint = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaMain = new javax.swing.JTextArea();
        jLabelSEDate = new javax.swing.JLabel();
        jLabelSEDash = new javax.swing.JLabel();
        jTextFieldSDate = new javax.swing.JTextField();
        jTextFieldEDate = new javax.swing.JTextField();
        jTabbedPaneSys = new javax.swing.JTabbedPane();
        jPanelMACD = new javax.swing.JPanel();
        jRadioButtonMacdBar = new javax.swing.JRadioButton();
        jRadioButtonMacdDif = new javax.swing.JRadioButton();
        jLabelbp0 = new javax.swing.JLabel();
        jLabelbp1 = new javax.swing.JLabel();
        jTextFieldBp0 = new javax.swing.JTextField();
        jTextFieldBp1 = new javax.swing.JTextField();
        jCheckBoxAddSys = new javax.swing.JCheckBox();
        jRadioButtonAddMa = new javax.swing.JRadioButton();
        jRadioButtonAddLm = new javax.swing.JRadioButton();
        jRadioButtonAddDif = new javax.swing.JRadioButton();
        jPanelMA = new javax.swing.JPanel();
        jTextFieldMAS = new javax.swing.JTextField();
        jTextFieldMAL = new javax.swing.JTextField();
        jLabelMATrade = new javax.swing.JLabel();
        jLabelMAS = new javax.swing.JLabel();
        jLabelMAL = new javax.swing.JLabel();
        jPanelLM = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jCheckBoxRecord = new javax.swing.JCheckBox();
        jTextFieldTp2 = new javax.swing.JTextField();
        jLabelTp2 = new javax.swing.JLabel();
        jTextFieldTp1 = new javax.swing.JTextField();
        jLabelTp1 = new javax.swing.JLabel();
        jComboBoxLMStatus = new javax.swing.JComboBox<>();
        jLabelLMStatus = new javax.swing.JLabel();
        jComboBoxLMDays = new javax.swing.JComboBox<>();
        jLabelLMDays = new javax.swing.JLabel();
        jRadioButtonLML = new javax.swing.JRadioButton();
        jRadioButtonLMS = new javax.swing.JRadioButton();
        jLabelClose = new javax.swing.JLabel();
        jButtonTradeChart = new javax.swing.JButton();
        jButtonTradeRecord = new javax.swing.JButton();
        jButtonTradeEva = new javax.swing.JButton();
        jLabelPriceFactor = new javax.swing.JLabel();
        jComboBoxPriceFactor = new javax.swing.JComboBox<>();
        jPanelSysFilter = new javax.swing.JPanel();
        jLabelPara1 = new javax.swing.JLabel();
        jLabelPara2 = new javax.swing.JLabel();
        jLabelPara3 = new javax.swing.JLabel();
        jLabelPara4 = new javax.swing.JLabel();
        jLabelDash1 = new javax.swing.JLabel();
        jLabelDash2 = new javax.swing.JLabel();
        jLabelDash3 = new javax.swing.JLabel();
        jLabelDash4 = new javax.swing.JLabel();
        jTextFieldPS1 = new javax.swing.JTextField();
        jTextFieldPE1 = new javax.swing.JTextField();
        jTextFieldPS2 = new javax.swing.JTextField();
        jTextFieldPE2 = new javax.swing.JTextField();
        jTextFieldPS3 = new javax.swing.JTextField();
        jTextFieldPE3 = new javax.swing.JTextField();
        jTextFieldPS4 = new javax.swing.JTextField();
        jTextFieldPE4 = new javax.swing.JTextField();
        jButtonFilterStart = new javax.swing.JButton();
        jButtonFilterCheck = new javax.swing.JButton();
        jCheckBoxHandleMode = new javax.swing.JCheckBox();
        jButtonCheckUp = new javax.swing.JButton();
        jButtonEvaluate = new javax.swing.JButton();
        jComboBox2dObject = new javax.swing.JComboBox<>();
        jCheckBox2dObject = new javax.swing.JCheckBox();
        jLabelDate2 = new javax.swing.JLabel();
        jLabelClose2 = new javax.swing.JLabel();
        jButtonTest = new javax.swing.JButton();
        jLabelStockName2 = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemImport = new javax.swing.JMenuItem();
        jMenuIndex = new javax.swing.JMenu();
        jMenuItemSZZS = new javax.swing.JMenuItem();
        jMenuItemSZCZ = new javax.swing.JMenuItem();
        jMenuItemHS300 = new javax.swing.JMenuItem();
        jMenuItemZZ500 = new javax.swing.JMenuItem();
        jMenuItemCYBZ = new javax.swing.JMenuItem();
        jMenuItemQZYY = new javax.swing.JMenuItem();
        jMenuItemZZJG = new javax.swing.JMenuItem();
        jMenuItemSWZQ = new javax.swing.JMenuItem();
        jMenuItemZGHL = new javax.swing.JMenuItem();
        jMenuRun = new javax.swing.JMenu();
        jMenuItemDZH = new javax.swing.JMenuItem();
        jMenuItemTDX = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        jMenuItemCopy.setText("复制");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemCopy);

        jMenuItemClear.setText("清除");
        jMenuItemClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemClear);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("智能证券系统-证券交易");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStockName.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelStockName.setForeground(new java.awt.Color(204, 0, 204));
        jLabelStockName.setText("上证指数(000001)");
        jLabelStockName.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanelMain.add(jLabelStockName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, -1, -1));

        jLabelDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelDate.setForeground(new java.awt.Color(0, 0, 204));
        jLabelDate.setText("日期：----/--/--");
        jPanelMain.add(jLabelDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        jTablePoint.getTableHeader().setFont(new java.awt.Font("微软雅黑", 0, 12));
        jTablePoint.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTablePoint.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"当前资产", null, "交易次数", ""},
                {"起始资金", null, "盈利次数", null},
                {"净利润", null, "亏损次数", ""},
                {"标的收益率", null, "胜率(P)", null},
                {"系统收益率", null, "平均盈利", null},
                {"系统标的比", null, "平均亏损", ""},
                {"系统年化率", "", "赔率(R)", null},
                {"测试周期", null, "数学期望", null},
                {"持仓周期", "", "总盈利", null},
                {"持仓时间比", null, "总亏损", null},
                {"平均持仓期", null, "最大盈利", null},
                {"平均盈利期", null, "最大亏损", null},
                {"平均亏损期", null, "最大连盈数", null},
                {"标准年化率", null, "最大连亏数", null},
                {"持仓年化率", null, "最大连盈比", null},
                {"单次均收益", null, "最大连亏比", null}
            },
            new String [] {
                "统计指标", "全部交易", "统计指标", "全部交易"
            }
        ));
        jScrollPane1.setViewportView(jTablePoint);
        if (jTablePoint.getColumnModel().getColumnCount() > 0) {
            jTablePoint.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTablePoint.getColumnModel().getColumn(0).setMaxWidth(70);
            jTablePoint.getColumnModel().getColumn(2).setPreferredWidth(70);
            jTablePoint.getColumnModel().getColumn(2).setMaxWidth(70);
        }

        jPanelMain.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 340, 286));

        jTextAreaMain.setColumns(20);
        jTextAreaMain.setFont(new java.awt.Font("仿宋", 0, 11)); // NOI18N
        jTextAreaMain.setRows(5);
        jTextAreaMain.setComponentPopupMenu(jPopupMenu1);
        jTextAreaMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextAreaMainMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaMain);

        jPanelMain.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 385, 340, 80));

        jLabelSEDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelSEDate.setText("日期：");
        jPanelMain.add(jLabelSEDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, -1, -1));

        jLabelSEDash.setText("-");
        jPanelMain.add(jLabelSEDash, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 351, -1, -1));

        jTextFieldSDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldSDate.setText("----/--/--");
        jPanelMain.add(jTextFieldSDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 348, 75, -1));

        jTextFieldEDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldEDate.setText("----/--/--");
        jPanelMain.add(jTextFieldEDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 348, 75, -1));

        jTabbedPaneSys.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTabbedPaneSys.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneSysStateChanged(evt);
            }
        });

        jPanelMACD.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroupMACD.add(jRadioButtonMacdBar);
        jRadioButtonMacdBar.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonMacdBar.setSelected(true);
        jRadioButtonMacdBar.setText("BAR突破交易");
        jPanelMACD.add(jRadioButtonMacdBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        buttonGroupMACD.add(jRadioButtonMacdDif);
        jRadioButtonMacdDif.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonMacdDif.setText("DIF突破交易");
        jPanelMACD.add(jRadioButtonMacdDif, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, -1, -1));

        jLabelbp0.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelbp0.setText("主突破点：");
        jPanelMACD.add(jLabelbp0, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabelbp1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelbp1.setText("副突破点：");
        jPanelMACD.add(jLabelbp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, -1, -1));

        jTextFieldBp0.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldBp0.setText("0");
        jPanelMACD.add(jTextFieldBp0, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 58, 40, -1));

        jTextFieldBp1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldBp1.setText("0");
        jPanelMACD.add(jTextFieldBp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 58, 40, -1));

        jCheckBoxAddSys.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxAddSys.setText("叠加系统交易参考");
        jPanelMACD.add(jCheckBoxAddSys, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        buttonGroupMacdAdd.add(jRadioButtonAddMa);
        jRadioButtonAddMa.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonAddMa.setText("均线系统");
        jPanelMACD.add(jRadioButtonAddMa, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, -1, -1));

        buttonGroupMacdAdd.add(jRadioButtonAddLm);
        jRadioButtonAddLm.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonAddLm.setText("趋势系统");
        jPanelMACD.add(jRadioButtonAddLm, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, -1, -1));

        buttonGroupMacdAdd.add(jRadioButtonAddDif);
        jRadioButtonAddDif.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonAddDif.setSelected(true);
        jRadioButtonAddDif.setText("DIF系统");
        jPanelMACD.add(jRadioButtonAddDif, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, -1, -1));

        jTabbedPaneSys.addTab("MACD", jPanelMACD);

        jPanelMA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldMAS.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldMAS.setText("1");
        jPanelMA.add(jTextFieldMAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 40, -1));

        jTextFieldMAL.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldMAL.setText("20");
        jPanelMA.add(jTextFieldMAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 40, -1));

        jLabelMATrade.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMATrade.setText("均线突破均线交易：");
        jPanelMA.add(jLabelMATrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabelMAS.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMAS.setText("短期均线：");
        jPanelMA.add(jLabelMAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabelMAL.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMAL.setText("长期均线：");
        jPanelMA.add(jLabelMAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, -1));

        jTabbedPaneSys.addTab("均线", jPanelMA);

        jPanelLM.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStatus.setFont(new java.awt.Font("隶书", 1, 30)); // NOI18N
        jLabelStatus.setForeground(new java.awt.Color(255, 0, 0));
        jLabelStatus.setText("主上升!");
        jPanelLM.add(jLabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 5, -1, -1));

        jCheckBoxRecord.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxRecord.setText("生成交易日志");
        jPanelLM.add(jCheckBoxRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, -1, -1));

        jTextFieldTp2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldTp2.setText("3");
        jPanelLM.add(jTextFieldTp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 30, -1));

        jLabelTp2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelTp2.setText("TP2:");
        jPanelLM.add(jLabelTp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, -1, -1));

        jTextFieldTp1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldTp1.setText("8");
        jPanelLM.add(jTextFieldTp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 30, -1));

        jLabelTp1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelTp1.setText("TP1:");
        jPanelLM.add(jLabelTp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, -1, -1));

        jComboBoxLMStatus.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxLMStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "主上升", "主下降" }));
        jComboBoxLMStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLMStatusActionPerformed(evt);
            }
        });
        jPanelLM.add(jComboBoxLMStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 50, -1, -1));

        jLabelLMStatus.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelLMStatus.setText("起始状态：");
        jPanelLM.add(jLabelLMStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, -1, -1));

        jComboBoxLMDays.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxLMDays.setMaximumRowCount(9);
        jComboBoxLMDays.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "收盘价", "2日均线", "3日均线", "4日均线", "5日均线" }));
        jComboBoxLMDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLMDaysActionPerformed(evt);
            }
        });
        jPanelLM.add(jComboBoxLMDays, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 50, -1, -1));

        jLabelLMDays.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelLMDays.setText("样本：");
        jPanelLM.add(jLabelLMDays, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 50, -1, -1));

        buttonGroupLM.add(jRadioButtonLML);
        jRadioButtonLML.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonLML.setSelected(true);
        jRadioButtonLML.setText("上升大趋势买卖");
        jPanelLM.add(jRadioButtonLML, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 90, -1, -1));

        buttonGroupLM.add(jRadioButtonLMS);
        jRadioButtonLMS.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonLMS.setText("主升阶段买卖");
        jPanelLM.add(jRadioButtonLMS, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 116, -1, -1));

        jTabbedPaneSys.addTab("趋势", jPanelLM);

        jPanelMain.add(jTabbedPaneSys, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, 320, 210));

        jLabelClose.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(250, 0, 0));
        jLabelClose.setText("收盘：--");
        jPanelMain.add(jLabelClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, -1, -1));

        jButtonTradeChart.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTradeChart.setText("交易曲线");
        jButtonTradeChart.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonTradeChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTradeChartActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonTradeChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 345, -1, 30));

        jButtonTradeRecord.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTradeRecord.setText("交易记录");
        jButtonTradeRecord.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonTradeRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTradeRecordActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonTradeRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 345, -1, 30));

        jButtonTradeEva.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTradeEva.setText("交易评测");
        jButtonTradeEva.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonTradeEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTradeEvaActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonTradeEva, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 345, -1, 30));

        jLabelPriceFactor.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPriceFactor.setText("系数：");
        jPanelMain.add(jLabelPriceFactor, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 350, -1, -1));

        jComboBoxPriceFactor.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxPriceFactor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "X1", "X10", "X100", "X1000" }));
        jComboBoxPriceFactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPriceFactorActionPerformed(evt);
            }
        });
        jPanelMain.add(jComboBoxPriceFactor, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 348, -1, -1));

        jPanelSysFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "优选系统", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 12))); // NOI18N
        jPanelSysFilter.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jPanelSysFilter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelPara1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPara1.setText("P1:");
        jPanelSysFilter.add(jLabelPara1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 27, -1, -1));

        jLabelPara2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPara2.setText("P2:");
        jPanelSysFilter.add(jLabelPara2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 51, -1, -1));

        jLabelPara3.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPara3.setText("P3:");
        jPanelSysFilter.add(jLabelPara3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 27, -1, -1));

        jLabelPara4.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPara4.setText("P4:");
        jPanelSysFilter.add(jLabelPara4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 51, -1, -1));

        jLabelDash1.setText("-");
        jPanelSysFilter.add(jLabelDash1, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 29, -1, -1));

        jLabelDash2.setText("-");
        jPanelSysFilter.add(jLabelDash2, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 52, -1, -1));

        jLabelDash3.setText("-");
        jPanelSysFilter.add(jLabelDash3, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 29, -1, -1));

        jLabelDash4.setText("-");
        jPanelSysFilter.add(jLabelDash4, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 52, -1, -1));

        jTextFieldPS1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextFieldPS1.setText("-80");
        jPanelSysFilter.add(jTextFieldPS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 26, 30, -1));

        jTextFieldPE1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextFieldPE1.setText("100");
        jPanelSysFilter.add(jTextFieldPE1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 26, 30, -1));

        jTextFieldPS2.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextFieldPS2.setText("0");
        jPanelSysFilter.add(jTextFieldPS2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 30, -1));

        jTextFieldPE2.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextFieldPE2.setText("0");
        jPanelSysFilter.add(jTextFieldPE2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 30, -1));

        jTextFieldPS3.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextFieldPS3.setText("0");
        jPanelSysFilter.add(jTextFieldPS3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 26, 30, -1));

        jTextFieldPE3.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextFieldPE3.setText("0");
        jPanelSysFilter.add(jTextFieldPE3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 26, 30, -1));

        jTextFieldPS4.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextFieldPS4.setText("0");
        jPanelSysFilter.add(jTextFieldPS4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 30, -1));

        jTextFieldPE4.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextFieldPE4.setText("0");
        jPanelSysFilter.add(jTextFieldPE4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 30, -1));

        jButtonFilterStart.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonFilterStart.setText("开始");
        jButtonFilterStart.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonFilterStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterStartActionPerformed(evt);
            }
        });
        jPanelSysFilter.add(jButtonFilterStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 23, 60, -1));

        jButtonFilterCheck.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonFilterCheck.setText("查看");
        jButtonFilterCheck.setEnabled(false);
        jButtonFilterCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterCheckActionPerformed(evt);
            }
        });
        jPanelSysFilter.add(jButtonFilterCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 48, 60, -1));

        jPanelMain.add(jPanelSysFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 378, 320, 90));

        jCheckBoxHandleMode.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxHandleMode.setText("固定金额投资");
        jCheckBoxHandleMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHandleModeActionPerformed(evt);
            }
        });
        jPanelMain.add(jCheckBoxHandleMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 340, -1, -1));

        jButtonCheckUp.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonCheckUp.setText("检测");
        jButtonCheckUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckUpActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonCheckUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, -1, -1));

        jButtonEvaluate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonEvaluate.setText("评估");
        jButtonEvaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEvaluateActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonEvaluate, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, -1, -1));

        jComboBox2dObject.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBox2dObject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "全指医药", "导入..." }));
        jComboBox2dObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2dObjectActionPerformed(evt);
            }
        });
        jPanelMain.add(jComboBox2dObject, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 300, -1, -1));

        jCheckBox2dObject.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBox2dObject.setSelected(true);
        jCheckBox2dObject.setText("选择二级标的");
        jCheckBox2dObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2dObjectActionPerformed(evt);
            }
        });
        jPanelMain.add(jCheckBox2dObject, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 300, -1, -1));

        jLabelDate2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelDate2.setForeground(new java.awt.Color(0, 0, 204));
        jLabelDate2.setText("----/--/--");
        jPanelMain.add(jLabelDate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 270, -1, -1));

        jLabelClose2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelClose2.setForeground(new java.awt.Color(250, 0, 0));
        jLabelClose2.setText("收盘：--");
        jPanelMain.add(jLabelClose2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 270, -1, -1));

        jButtonTest.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTest.setLabel("测试");
        jButtonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonTest, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, -1, -1));

        jLabelStockName2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelStockName2.setForeground(new java.awt.Color(51, 0, 51));
        jLabelStockName2.setText("全指医药");
        jPanelMain.add(jLabelStockName2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 270, -1, -1));

        getContentPane().add(jPanelMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 478));

        jMenuFile.setText("文件");

        jMenuItemImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemImport.setText("导入...");
        jMenuItemImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemImportActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemImport);

        jMenuBar.add(jMenuFile);

        jMenuIndex.setText("常用指数");

        jMenuItemSZZS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemSZZS.setText("上证指数");
        jMenuItemSZZS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSZZSActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSZZS);

        jMenuItemSZCZ.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemSZCZ.setText("深证成指");
        jMenuItemSZCZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSZCZActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSZCZ);

        jMenuItemHS300.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemHS300.setText("沪深300");
        jMenuItemHS300.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHS300ActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemHS300);

        jMenuItemZZ500.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemZZ500.setText("中证500");
        jMenuItemZZ500.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZZ500ActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemZZ500);

        jMenuItemCYBZ.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemCYBZ.setText("创业板指");
        jMenuItemCYBZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCYBZActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemCYBZ);

        jMenuItemQZYY.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemQZYY.setText("全指医药");
        jMenuItemQZYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQZYYActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemQZYY);

        jMenuItemZZJG.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemZZJG.setText("中证军工");
        jMenuItemZZJG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZZJGActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemZZJG);

        jMenuItemSWZQ.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemSWZQ.setText("申万证券");
        jMenuItemSWZQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSWZQActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSWZQ);

        jMenuItemZGHL.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_8, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemZGHL.setText("中国互联");
        jMenuItemZGHL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZGHLActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemZGHL);

        jMenuBar.add(jMenuIndex);

        jMenuRun.setText("运行");

        jMenuItemDZH.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemDZH.setText("大智慧");
        jMenuItemDZH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDZHActionPerformed(evt);
            }
        });
        jMenuRun.add(jMenuItemDZH);

        jMenuItemTDX.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemTDX.setText("通达信");
        jMenuItemTDX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTDXActionPerformed(evt);
            }
        });
        jMenuRun.add(jMenuItemTDX);

        jMenuBar.add(jMenuRun);

        jMenuHelp.setText("帮助");

        jMenuItemAbout.setText("关于");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemImportActionPerformed
        importFile(null);
    }//GEN-LAST:event_jMenuItemImportActionPerformed

    private void jMenuItemSZZSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSZZSActionPerformed
        importFile("data\\上证指数.txt");
    }//GEN-LAST:event_jMenuItemSZZSActionPerformed

    private void jMenuItemSZCZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSZCZActionPerformed
        importFile("data\\深证成指.txt");
    }//GEN-LAST:event_jMenuItemSZCZActionPerformed

    private void jMenuItemHS300ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHS300ActionPerformed
        importFile("data\\沪深300.txt");
    }//GEN-LAST:event_jMenuItemHS300ActionPerformed

    private void jMenuItemZZ500ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZZ500ActionPerformed
        importFile("data\\中证500.txt");
    }//GEN-LAST:event_jMenuItemZZ500ActionPerformed

    private void jMenuItemCYBZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCYBZActionPerformed
        importFile("data\\创业板指.txt");
    }//GEN-LAST:event_jMenuItemCYBZActionPerformed

    private void jMenuItemQZYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQZYYActionPerformed
        importFile("data\\全指医药.txt");
    }//GEN-LAST:event_jMenuItemQZYYActionPerformed

    private void jMenuItemZZJGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZZJGActionPerformed
        importFile("data\\中证军工.txt");
    }//GEN-LAST:event_jMenuItemZZJGActionPerformed

    private void jMenuItemSWZQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSWZQActionPerformed
        importFile("data\\申万证券.txt");
    }//GEN-LAST:event_jMenuItemSWZQActionPerformed

    private void jMenuItemZGHLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZGHLActionPerformed
        importFile("data\\中国互联.txt");
        jComboBoxPriceFactor.setSelectedIndex(3);
    }//GEN-LAST:event_jMenuItemZGHLActionPerformed

    private void jMenuItemDZHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDZHActionPerformed
        runExeFile("C:\\dzh365\\dzh2.exe");
    }//GEN-LAST:event_jMenuItemDZHActionPerformed

    private void jMenuItemTDXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTDXActionPerformed
        runExeFile("C:\\new_tdx\\TdxW.exe");
    }//GEN-LAST:event_jMenuItemTDXActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        JOptionPane.showMessageDialog(new JFrame(), "智能证券系统-证券交易 V17.03\n版权所有(C) 张向荣(Aioros Zhang)");
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jTextAreaMainMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMainMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextAreaMainMouseReleased

    private void jMenuItemClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearActionPerformed
        jTextAreaMain.setText("");
    }//GEN-LAST:event_jMenuItemClearActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        jTextAreaMain.selectAll();
        jTextAreaMain.copy();
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jButtonTradeChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTradeChartActionPerformed
        TradeChart tc = new TradeChart(this, false, this);
    }//GEN-LAST:event_jButtonTradeChartActionPerformed

    private void jButtonTradeRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTradeRecordActionPerformed
        if (evaluated) {
            TradeTable tradeTable = new TradeTable(this, false, this);
        } else {
            JOptionPane.showMessageDialog(this, "请先进行评测再查看交易记录");
        }
    }//GEN-LAST:event_jButtonTradeRecordActionPerformed

    private void jButtonTradeEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTradeEvaActionPerformed
        boolean ret = false;
        dateProcess();
        if (tradeDays == 0) {
            return;
        }
        getTradeMode();
        int p1 = 0, p2 = 0, p3 = 0;
        String[] words = tradePara.split(",");
        try {
            p1 = Integer.parseInt(words[0]);
            p2 = Integer.parseInt(words[1]);
            p3 = Integer.parseInt(words[2]);
        } catch (Exception e) {
        }
        switch (tradeMode) {
            case "MA":
                ret = sysMAEva(p1, p2);
                break;
            case "LML":
            case "LMS":
                ret = sysLMEva(tradeMode, p1, p2);
                parseStatus(livermore.STATUST);
                lmLogger(livermore);
                break;
            case "BAR":
            case "DIF":
                ret = sysMACDEva(tradeMode, p1);
                break;
            case "BARDIF":
                ret = sysMACD2Eva(p1, p2);
                break;
            case "BARMA":
            case "DIFMA":
                ret = sysMACDMAEva(tradeMode, p1, p2, p3);
                break;
            case "BARLML":
            case "BARLMS":
            case "DIFLML":
            case "DIFLMS":
                ret = sysMACDLMEva(tradeMode, p1, p2, p3);
                break;
            default:
                break;
        }
        if (!ret) {
            JOptionPane.showMessageDialog(new JFrame(), "无效的参数设置！");
            return;
        }
        SystemReport sr = updateSystemReport(handle);
        updateTable(sr);
        updateMarket(0, eIdx);
        evaluated = true;
    }//GEN-LAST:event_jButtonTradeEvaActionPerformed

    private void jButtonFilterStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterStartActionPerformed
        long time = System.currentTimeMillis();
        getTradeMode();
        jTextAreaMain.setText("");
        dateProcess();
        if (tradeDays == 0) {
            return;
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        SystemReport sr;
        ArrayList<SystemReport> srList = new ArrayList<>();
        int ps1 = Integer.parseInt(jTextFieldPS1.getText());
        int pe1 = Integer.parseInt(jTextFieldPE1.getText());
        int ps2 = Integer.parseInt(jTextFieldPS2.getText());
        int pe2 = Integer.parseInt(jTextFieldPE2.getText());
        int ps3 = Integer.parseInt(jTextFieldPS3.getText());
        int pe3 = Integer.parseInt(jTextFieldPE3.getText());
        switch (tradeMode) {
            case "MA":
                for (int i = ps1; i <= pe1; i++) {
                    for (int j = ps2; j <= pe2; j++) {
                        if (j >= i * 2) {
                            if (sysMAEva(i, j)) {
                                String para = String.format("%d,%d", i, j);
                                sr = updateSimpleReport(tradeMode, para, handle);
                                if ((sr.maxLossRatio >= MAX_LOSS) && (sr.positionDaysRate >= POS_RATE)) {
                                    srList.add(sr);
                                }
                            }
                        }
                    }
                }
                break;
            case "LML":
            case "LMS":
                for (int i = ps1; i <= pe1; i++) {
                    for (int j = ps2; j <= pe2; j++) {
                        if (j <= (i / 2 + 1)) {
                            if (sysLMEva(tradeMode, i, j)) {
                                String para = String.format("%d,%d", i, j);
                                sr = updateSimpleReport(tradeMode, para, handle);
                                if ((sr.maxLossRatio >= MAX_LOSS) && (sr.positionDaysRate >= POS_RATE)) {
                                    srList.add(sr);
                                }
                            }
                        }
                    }
                }
                break;
            case "BAR":
            case "DIF":
                for (int i = ps1; i <= pe1; i++) {
                    if (sysMACDEva(tradeMode, i)) {
                        String para = String.format("%d", i);
                        sr = updateSimpleReport(tradeMode, para, handle);
                        if ((sr.maxLossRatio >= MAX_LOSS) && (sr.positionDaysRate >= POS_RATE)) {
                            srList.add(sr);
                        }
                    }
                }
                break;
            case "BARDIF":
                for (int i = ps1; i <= pe1; i++) {
                    for (int j = ps2; j <= pe2; j++) {
                        if (sysMACD2Eva(i, j)) {
                            String para = String.format("%d,%d", i, j);
                            sr = updateSimpleReport(tradeMode, para, handle);
                            if ((sr.maxLossRatio >= MAX_LOSS) && (sr.positionDaysRate >= POS_RATE)) {
                                srList.add(sr);
                            }
                        }
                    }
                }
                break;
            case "BARMA":
            case "DIFMA":
                for (int i = ps1; i <= pe1; i++) {
                    for (int j = ps2; j <= pe2; j++) {
                        for (int k = ps3; k <= pe3; k++) {
                            if (k >= j * 2) {
                                if (sysMACDMAEva(tradeMode, i, j, k)) {
                                    String para = String.format("%d,%d,%d", i, j, k);
                                    sr = updateSimpleReport(tradeMode, para, handle);
                                    if ((sr.maxLossRatio >= MAX_LOSS) && (sr.positionDaysRate >= POS_RATE)) {
                                        srList.add(sr);
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case "BARLML":
            case "BARLMS":
            case "DIFLML":
            case "DIFLMS":
                for (int i = ps1; i <= pe1; i++) {
                    for (int j = ps2; j <= pe2; j++) {
                        for (int k = ps3; k <= pe3; k++) {
                            if (k <= (j / 2 + 1)) {
                                if (sysMACDLMEva(tradeMode, i, j, k)) {
                                    String para = String.format("%d,%d,%d", i, j, k);
                                    sr = updateSimpleReport(tradeMode, para, handle);
                                    if ((sr.maxLossRatio >= MAX_LOSS) && (sr.positionDaysRate >= POS_RATE)) {
                                        srList.add(sr);
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            default:
                break;
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        jButtonFilterCheck.setEnabled(true);
        Collections.sort(srList, (SystemReport arg0, SystemReport arg1) -> new Float(arg1.currentAsset).compareTo(arg0.currentAsset));
        rankTable = new RankTable(this, false, this, srList);

        time = System.currentTimeMillis() - time;
        float excTime = (float) time / 1000;
        System.out.println("Elapsed time: " + excTime + "s");
    }//GEN-LAST:event_jButtonFilterStartActionPerformed

    private void jButtonFilterCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterCheckActionPerformed
        rankTable.setVisible(true);
    }//GEN-LAST:event_jButtonFilterCheckActionPerformed

    private void jComboBoxPriceFactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPriceFactorActionPerformed
        for (int i = 0; i < rows; i++) {
            double zoomPrice = closeList.get(i) * Math.pow(10, jComboBoxPriceFactor.getSelectedIndex());
            priceList.set(i, zoomPrice);
        }
    }//GEN-LAST:event_jComboBoxPriceFactorActionPerformed

    private void jComboBoxLMDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLMDaysActionPerformed
        lmDays = jComboBoxLMDays.getSelectedIndex() + 1;
    }//GEN-LAST:event_jComboBoxLMDaysActionPerformed

    private void jComboBoxLMStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLMStatusActionPerformed
        lmStatus = (jComboBoxLMStatus.getSelectedIndex() == 0);
        parseStatus(lmStatus ? 1 : -1);
    }//GEN-LAST:event_jComboBoxLMStatusActionPerformed

    private void jTabbedPaneSysStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneSysStateChanged
        jTextFieldPS1.setText("0");
        jTextFieldPE1.setText("0");
        jTextFieldPS2.setText("0");
        jTextFieldPE2.setText("0");
        jTextFieldPS3.setText("0");
        jTextFieldPE3.setText("0");
        switch (jTabbedPaneSys.getSelectedIndex()) {
            case 0:
                jTextFieldPS1.setText("-80");
                jTextFieldPE1.setText("100");
                if (jCheckBoxAddSys.isSelected()) {
                    if (jRadioButtonAddDif.isSelected()) {
                        jTextFieldPS2.setText("-80");
                        jTextFieldPE2.setText("100");
                    } else if (jRadioButtonAddMa.isSelected()) {
                        jTextFieldPS2.setText("1");
                        jTextFieldPE2.setText("10");
                        jTextFieldPS3.setText("10");
                        jTextFieldPE3.setText("240");
                    } else {
                        jTextFieldPS2.setText("5");
                        jTextFieldPE2.setText("18");
                        jTextFieldPS3.setText("2");
                        jTextFieldPE3.setText("8");
                    }
                }
                break;
            case 1:
                jTextFieldPS1.setText("1");
                jTextFieldPE1.setText("10");
                jTextFieldPS2.setText("10");
                jTextFieldPE2.setText("240");
                break;
            case 2:
                jTextFieldPS1.setText("5");
                jTextFieldPE1.setText("18");
                jTextFieldPS2.setText("2");
                jTextFieldPE2.setText("8");
                break;
        }
    }//GEN-LAST:event_jTabbedPaneSysStateChanged

    private void jCheckBoxHandleModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHandleModeActionPerformed
        if (jCheckBoxHandleMode.isSelected()) {
            handleMode = 1;
        } else {
            handleMode = 0;
        }
    }//GEN-LAST:event_jCheckBoxHandleModeActionPerformed

    private void jButtonCheckUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckUpActionPerformed
        ArrayList<String> modelList = new ArrayList<>();
        chkDataList = new ArrayList<>();

        try {
            String fileName = stockName + ".ini";
            if (gradeFlag == 1) {
                fileName = stockName + "-" + stockName2 + ".ini";
            }
            File file = new File("ini/" + fileName);
            if (!file.exists()) {
                JOptionPane.showMessageDialog(new JFrame(), "没有对应的\"" + fileName + "\"文件！");
                return;
            }
            InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "gbk");
            BufferedReader br = new BufferedReader(isr);
            String line;
            while ((line = br.readLine()) != null) {
                if (line.matches("^[A-Z].*")) {
                    modelList.add(line);
                }
            }
            br.close();
            isr.close();
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
            return;
        }

        for (String line : modelList) {
            String[] words = line.split(":");
            String mode = words[0];
            String para = words[1];
            switch (mode) {
                case "MA":
                    sysMAChk(para);
                    break;
                case "LML":
                case "LMS":
                    sysLMChk(mode, para);
                    break;
                case "BAR":
                case "DIF":
                    sysMACDChk(mode, para);
                    break;
                case "BARDIF":
                    sysMACD2Chk(para);
                    break;
                case "BARMA":
                case "DIFMA":
                    sysMACDMAChk(mode, para);
                    break;
                case "BARLML":
                case "BARLMS":
                case "DIFLML":
                case "DIFLMS":
                    sysMACDLMChk(mode, para);
                    break;
                default:
                    break;
            }
        }

        CheckTable ct = new CheckTable(this, false, this);
    }//GEN-LAST:event_jButtonCheckUpActionPerformed

    private void jButtonEvaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEvaluateActionPerformed
        ArrayList<String> modelList = new ArrayList<>();
        chkDataList = new ArrayList<>();

        try {
            String fileName = stockName + ".ini";
            if (gradeFlag == 1) {
                fileName = stockName + "-" + stockName2 + ".ini";
            }
            File file = new File("ini/" + fileName);
            if (!file.exists()) {
                JOptionPane.showMessageDialog(new JFrame(), "没有对应的\"" + fileName + "\"文件！");
                return;
            }
            InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "gbk");
            BufferedReader br = new BufferedReader(isr);
            String line;
            while ((line = br.readLine()) != null) {
                if (line.matches("^[A-Z].*")) {
                    modelList.add(line);
                }
            }
            br.close();
            isr.close();
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
            return;
        }

        dateProcess();
        if (tradeDays == 0) {
            return;
        }
        SystemReport sr;
        ArrayList<SystemReport> srList = new ArrayList<>();

        int p1 = 0, p2 = 0, p3 = 0;
        for (String line : modelList) {
            String[] words = line.split(":");
            String mode = words[0];
            String paras[] = words[1].split(" ");
            String[] ps = paras[0].split(",");
            try {
                p1 = Integer.parseInt(ps[0]);
                p2 = Integer.parseInt(ps[1]);
                p3 = Integer.parseInt(ps[2]);
            } catch (Exception e) {
            }
            switch (mode) {
                case "MA":
                    if (sysMAEva(p1, p2)) {
                        String para = String.format("%d,%d", p1, p2);
                        sr = updateSimpleReport(mode, para, handle);
                        srList.add(sr);
                    }
                    break;
                case "LML":
                case "LMS":
                    if (sysLMEva(mode, p1, p2)) {
                        String para = String.format("%d,%d", p1, p2);
                        sr = updateSimpleReport(mode, para, handle);
                        srList.add(sr);
                    }
                    break;
                case "BAR":
                case "DIF":
                    if (sysMACDEva(mode, p1)) {
                        String para = String.format("%d", p1);
                        sr = updateSimpleReport(mode, para, handle);
                        srList.add(sr);
                    }
                    break;
                case "BARDIF":
                    if (sysMACD2Eva(p1, p2)) {
                        String para = String.format("%d,%d", p1, p2);
                        sr = updateSimpleReport(mode, para, handle);
                        srList.add(sr);
                    }
                    break;
                case "BARMA":
                case "DIFMA":
                    if (sysMACDMAEva(mode, p1, p2, p3)) {
                        String para = String.format("%d,%d,%d", p1, p2, p3);
                        sr = updateSimpleReport(mode, para, handle);
                        srList.add(sr);
                    }
                    break;
                case "BARLML":
                case "BARLMS":
                case "DIFLML":
                case "DIFLMS":
                    if (sysMACDLMEva(mode, p1, p2, p3)) {
                        String para = String.format("%d,%d,%d", p1, p2, p3);
                        sr = updateSimpleReport(mode, para, handle);
                        srList.add(sr);
                    }
                    break;
                default:
                    break;
            }
        }
        rankTable = new RankTable(this, false, this, srList);
    }//GEN-LAST:event_jButtonEvaluateActionPerformed

    private void jComboBox2dObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2dObjectActionPerformed
        int index = jComboBox2dObject.getSelectedIndex();
        switch (index) {
            case 0:
                fileIn2 = "data\\全指医药.txt";
                break;
            default:
                fileIn2 = null;
                break;
        }
        importFile2(fileIn2);
    }//GEN-LAST:event_jComboBox2dObjectActionPerformed

    private void jCheckBox2dObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2dObjectActionPerformed
        gradeFlag = jCheckBox2dObject.isSelected() ? 1 : 0;
        if (gradeFlag == 1) {
            importFile2(fileIn2);
        }
    }//GEN-LAST:event_jCheckBox2dObjectActionPerformed

    private void jButtonTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestActionPerformed
        String[] stockArray = {"银华日利", "华宝添益", "理财金H", "建信添益", "交易货币", "华泰货币", "富国货币", "华夏快线", "财富宝E", "现金添富"};
        for (String stock : stockArray) {
            importFile("data/metf/" + stock + ".txt");
            int falls = 0;
            int rises = 0;
            int evens = 0;
            double totalFall = 0;
            double totalRise = 0;
            for (int i = 0; i < rows; i++) {
                if (openList.get(i) < closeList.get(i)) {
                    totalRise += (closeList.get(i) - openList.get(i)) * 1000;
                    rises++;
                } else if (openList.get(i) > closeList.get(i)) {
                    totalFall += (openList.get(i) - closeList.get(i)) * 1000;
                    falls++;
                } else {
                    evens++;
                }
            }
            double riseRatio = (double) 100 * rises / rows;
            double fallRatio = (double) 100 * falls / rows;
            double earning = totalRise - totalFall;
            double aveFall = totalFall / falls;
            double aveRise = totalRise / rises;
            double totalAve = earning / rows;
            double years = daysBetween(dateList, 0, rows - 1) / 365.25;
            double annualRate = earning / (years * 1000);
            System.out.println("ETF Name: " + stockName);
            System.out.println("Rise times: " + rises + "\tEven times: " + evens + "\tFall times: " + falls);
            System.out.println(String.format("Rise ratio: %.2f%%\tFall ratio: %.2f%%", riseRatio, fallRatio));
            System.out.println(String.format("Total Rise: %.2f\tTotal Fall: %.2f\tEarning: %.2f", totalRise, totalFall, earning));
            System.out.println(String.format("Average Rise: %.3f\tAverage Fall: %.3f\tTotal Average: %.3f", aveRise, aveFall, totalAve));
            System.out.println(String.format("Total years: %.2f\tAnnual Rate: %.2f%%", years, annualRate));
        }
    }//GEN-LAST:event_jButtonTestActionPerformed

    /**
     ********************* Start of User-defined function ********************
     */
    protected void importFile(String fileName) {
        if (fileName == null) {
            JFileChooser chooser = new JFileChooser("data/");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Data File (*.txt)", "txt");
            chooser.setFileFilter(filter);
            chooser.setDialogTitle("Select Data File");
            int ret = chooser.showOpenDialog(this);
            if (ret == JFileChooser.APPROVE_OPTION) {
                fileIn = chooser.getSelectedFile().getPath();
                fileOut = fileIn.substring(0, fileIn.length() - 4) + "_测试日志.txt";
            } else {
                return;
            }
        } else {
            fileIn = fileName;
            fileOut = fileIn.substring(0, fileIn.length() - 4) + "_测试日志.txt";
        }

        try {
            File file = new File(fileIn);
            InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "gbk");
            BufferedReader br = new BufferedReader(isr);
            String[] words = br.readLine().split("\t");
            stockName = words[1];
            stockCode = words[0].replaceAll("[\\pP\\p{Punct}]", "");
            jLabelStockName.setText(stockName + "(" + stockCode + ")");
            words = br.readLine().split("\t");
            dateList = new ArrayList<>();
            openList = new ArrayList<>();
            highList = new ArrayList<>();
            lowList = new ArrayList<>();
            closeList = new ArrayList<>();
            priceList = new ArrayList<>();
            String line;
            while ((line = br.readLine()) != null) {
                words = line.split("\t");
                dateList.add(words[0]);
                openList.add(Double.parseDouble(words[1]));
                highList.add(Double.parseDouble(words[2]));
                lowList.add(Double.parseDouble(words[3]));
                closeList.add(Double.parseDouble(words[4]));
                priceList.add(Double.parseDouble(words[4]));
            }
            rows = dateList.size();
            br.close();
            isr.close();
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        jTextFieldSDate.setText(dateList.get(0));
        jTextFieldEDate.setText(dateList.get(rows - 1));
        updateMarket(0, rows - 1);
        evaluated = false;
    }

    protected void importFile2(String fileName) {
        fileIn2 = fileName;
        if (fileName == null) {
            JFileChooser chooser = new JFileChooser("data/");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Data File (*.txt)", "txt");
            chooser.setFileFilter(filter);
            chooser.setDialogTitle("Select Data File");
            int ret = chooser.showOpenDialog(this);
            if (ret == JFileChooser.APPROVE_OPTION) {
                fileIn2 = chooser.getSelectedFile().getPath();
            } else {
                return;
            }
        }

        try {
            File file = new File(fileIn2);
            InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "gbk");
            BufferedReader br = new BufferedReader(isr);
            String[] words = br.readLine().split("\t");
            stockName2 = words[1];
            dateList2 = new ArrayList<>();
            closeList2 = new ArrayList<>();
            priceList2 = new ArrayList<>();
            br.readLine();
            String line;
            while ((line = br.readLine()) != null) {
                words = line.split("\t");
                dateList2.add(words[0]);
                closeList2.add(Double.parseDouble(words[4]));
                priceList2.add(Double.parseDouble(words[4]));
            }
            rows2 = dateList2.size();
            br.close();
            isr.close();
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }

        updateMarket(1, rows2 - 1);
        evaluated = false;
    }

    private boolean sysMACDEva(String mode, double bp) {
        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        strategy = new Strategy(this);
        strategy.macd = macd;

        for (int i = 0; i < rows; i++) {
            if ((i >= sIdx) && (i <= eIdx)) {
                if (mode.equals("BAR")) {
                    strategy.barCrossTrade(i, bp);
                } else {
                    strategy.difCrossTrade(i, bp);
                }
            }
            if (i > eIdx) {
                break;
            }
        }

        return synthesize(gradeFlag);
    }

    private boolean sysMACD2Eva(double bp0, double bp1) {
        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        strategy = new Strategy(this);
        strategy.macd = macd;

        for (int i = 0; i < rows; i++) {
            if ((i >= sIdx) && (i <= eIdx)) {
                strategy.barDifCrossTrade(i, bp0, bp1);
            }
            if (i > eIdx) {
                break;
            }
        }

        return synthesize(gradeFlag);
    }

    private boolean sysMAEva(int mas, int mal) {
        MALine ma = new MALine(priceList);
        strategy = new Strategy(this);
        strategy.ma = ma;

        ArrayList<Double> masList = ma.getMAList(mas);
        ArrayList<Double> malList = ma.getMAList(mal);

        for (int i = 0; i < rows; i++) {
            if ((i >= sIdx) && (i <= eIdx)) {
                strategy.maCrossTrade(i, masList, malList);
            }
            if (i > eIdx) {
                break;
            }
        }

        return synthesize(gradeFlag);
    }

    private boolean sysLMEva(String mode, int t1, int t2) {
        MALine ma = new MALine(priceList);
        ArrayList<Double> maList = ma.getMAList(lmDays);
        livermore = new Livermore(lmStatus, t1, t2);
        strategy = new Strategy(this);
        strategy.livermore = livermore;

        try {
            if (jCheckBoxRecord.isSelected()) {
                fileWriter = new FileWriter(fileOut);
            }
            for (int i = 0; i < rows; i++) {
                String message = livermore.arithmetic(maList.get(i));
                lmFileLogger(i, livermore, message);
                if ((i >= sIdx) && (i <= eIdx)) {
                    if (mode.equals("LML")) {
                        strategy.lmLongTrade(i);
                    } else {
                        strategy.lmShortTrade(i);
                    }
                }
                if (i > eIdx) {
                    break;
                }
            }
            if (jCheckBoxRecord.isSelected()) {
                fileWriter.flush();
                fileWriter.close();
            }
        } catch (IOException e1) {
        }

        return synthesize(gradeFlag);
    }

    private boolean sysMACDMAEva(String mode, double bp, int mas, int mal) {
        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        MALine ma = new MALine(priceList);
        strategy = new Strategy(this);
        strategy.macd = macd;
        strategy.ma = ma;

        ArrayList<Double> masList = ma.getMAList(mas);
        ArrayList<Double> malList = ma.getMAList(mal);

        for (int i = 0; i < rows; i++) {
            if ((i >= sIdx) && (i <= eIdx)) {
                if (mode.equals("BARMA")) {
                    strategy.barMACrossTrade(i, bp, masList, malList);
                } else {
                    strategy.difMACrossTrade(i, bp, masList, malList);
                }
            }
            if (i > eIdx) {
                break;
            }
        }

        return synthesize(gradeFlag);
    }

    private boolean sysMACDLMEva(String mode, double bp, int t1, int t2) {
        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        MALine ma = new MALine(priceList);
        ArrayList<Double> maList = ma.getMAList(lmDays);
        Livermore livermore = new Livermore(lmStatus, t1, t2);
        strategy = new Strategy(this);
        strategy.macd = macd;
        strategy.livermore = livermore;

        for (int i = 0; i < rows; i++) {
            livermore.arithmetic(maList.get(i));
            if ((i >= sIdx) && (i <= eIdx)) {
                if (mode.equals("BARLML")) {
                    strategy.barLMLCrossTrade(i, bp);
                } else if (mode.equals("DIFLML")) {
                    strategy.difLMLCrossTrade(i, bp);
                } else if (mode.equals("BARLMS")) {
                    strategy.barLMSCrossTrade(i, bp);
                } else if (mode.equals("DIFLMS")) {
                    strategy.difLMSCrossTrade(i, bp);
                }
            }
            if (i > eIdx) {
                break;
            }
        }

        return synthesize(gradeFlag);
    }

    private void sysMACDChk(String mode, String para) {
        String[] paras = para.split(" ");
        String para0 = paras[0];
        String[] ps = para0.split(",");
        int bp = Integer.parseInt(ps[0]);
        CheckData chkData = new CheckData(mode, para0);
        chkData.amount = paras[1];

        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        strategy = new Strategy(this);
        strategy.macd = macd;

        for (int i = 0; i < rows; i++) {
            if (mode.equals("BAR")) {
                strategy.barCrossTrade(i, bp);
            } else {
                strategy.difCrossTrade(i, bp);
            }
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.size() > spIndexList.size()) {
            chkData.status = "持有";
            chkData.days = daysBetween(dateList, bpIndexList.get(bpIndexList.size() - 1), rows - 1);
        } else {
            chkData.status = "清空";
            chkData.days = daysBetween(dateList, spIndexList.get(spIndexList.size() - 1), rows - 1);
        }

        chkData.key = macd.getMACDKey(mode, bp);
        chkData.percent = 100 * (chkData.key - priceList.get(rows - 1)) / priceList.get(rows - 1);
        chkDataList.add(chkData);
    }

    private void sysMAChk(String para) {
        String[] paras = para.split(" ");
        String para0 = paras[0];
        String[] ps = para0.split(",");
        int mas = Integer.parseInt(ps[0]);
        int mal = Integer.parseInt(ps[1]);
        CheckData chkData = new CheckData("MA", para0);
        chkData.amount = paras[1];

        MALine ma = new MALine(priceList);
        strategy = new Strategy(this);
        strategy.ma = ma;

        ArrayList<Double> masList = ma.getMAList(mas);
        ArrayList<Double> malList = ma.getMAList(mal);
        for (int i = 0; i < rows; i++) {
            strategy.maCrossTrade(i, masList, malList);
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.size() > spIndexList.size()) {
            chkData.status = "持有";
            chkData.days = daysBetween(dateList, bpIndexList.get(bpIndexList.size() - 1), rows - 1);
        } else {
            chkData.status = "清空";
            chkData.days = daysBetween(dateList, spIndexList.get(spIndexList.size() - 1), rows - 1);
        }

        chkData.key = ma.getMAKey(mas, mal);
        chkData.percent = 100 * (chkData.key - priceList.get(rows - 1)) / priceList.get(rows - 1);
        chkDataList.add(chkData);
    }

    private void sysLMChk(String mode, String para) {
        String[] paras = para.split(" ");
        String para0 = paras[0];
        String[] ps = para0.split(",");
        int t1 = Integer.parseInt(ps[0]);
        int t2 = Integer.parseInt(ps[1]);
        CheckData chkData = new CheckData(mode, para0);
        chkData.amount = paras[1];

        livermore = new Livermore(true, t1, t2);
        strategy = new Strategy(this);
        strategy.livermore = livermore;

        for (int i = 0; i < rows; i++) {
            livermore.arithmetic(priceList.get(i));
            if (mode.equals("LML")) {
                strategy.lmLongTrade(i);
            } else {
                strategy.lmShortTrade(i);
            }
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.size() > spIndexList.size()) {
            chkData.status = "持有";
            chkData.days = daysBetween(dateList, bpIndexList.get(bpIndexList.size() - 1), rows - 1);
        } else {
            chkData.status = "清空";
            chkData.days = daysBetween(dateList, spIndexList.get(spIndexList.size() - 1), rows - 1);
        }

        chkData.key = livermore.getLMKey(mode);
        chkData.percent = 100 * (chkData.key - priceList.get(rows - 1)) / priceList.get(rows - 1);
        chkDataList.add(chkData);
    }

    private void sysMACD2Chk(String para) {
        String[] paras = para.split(" ");
        String para0 = paras[0];
        String[] ps = para0.split(",");
        int bp0 = Integer.parseInt(ps[0]);
        int bp1 = Integer.parseInt(ps[1]);
        CheckData chkData = new CheckData("BARDIF", para0);
        chkData.amount = paras[1];

        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        strategy = new Strategy(this);
        strategy.macd = macd;

        for (int i = 0; i < rows; i++) {
            strategy.barDifCrossTrade(i, bp0, bp1);
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.size() > spIndexList.size()) {
            chkData.status = "持有";
            chkData.days = daysBetween(dateList, bpIndexList.get(bpIndexList.size() - 1), rows - 1);
        } else {
            chkData.status = "清空";
            chkData.days = daysBetween(dateList, spIndexList.get(spIndexList.size() - 1), rows - 1);
        }

        double barKey = macd.getBARKey(bp0);
        double difKey = macd.getDIFKey(bp1);
        chkData.key = (barKey > difKey) ? barKey : difKey;
        chkData.percent = 100 * (chkData.key - priceList.get(rows - 1)) / priceList.get(rows - 1);
        chkDataList.add(chkData);
    }

    private void sysMACDMAChk(String mode, String para) {
        String[] paras = para.split(" ");
        String para0 = paras[0];
        String[] ps = para0.split(",");
        int bp = Integer.parseInt(ps[0]);
        int mas = Integer.parseInt(ps[1]);
        int mal = Integer.parseInt(ps[2]);
        CheckData chkData = new CheckData(mode, para0);
        chkData.amount = paras[1];

        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        MALine ma = new MALine(priceList);
        strategy = new Strategy(this);
        strategy.macd = macd;
        strategy.ma = ma;

        ArrayList<Double> masList = ma.getMAList(mas);
        ArrayList<Double> malList = ma.getMAList(mal);
        for (int i = 0; i < rows; i++) {
            if (mode.equals("BARMA")) {
                strategy.barMACrossTrade(i, bp, masList, malList);
            } else {
                strategy.difMACrossTrade(i, bp, masList, malList);
            }
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.size() > spIndexList.size()) {
            chkData.status = "持有";
            chkData.days = daysBetween(dateList, bpIndexList.get(bpIndexList.size() - 1), rows - 1);
        } else {
            chkData.status = "清空";
            chkData.days = daysBetween(dateList, spIndexList.get(spIndexList.size() - 1), rows - 1);
        }

        double maKey = ma.getMAKey(mas, mal);
        double macdKey = macd.getMACDKey(mode, bp);
        chkData.key = (maKey > macdKey) ? maKey : macdKey;
        chkData.percent = 100 * (chkData.key - priceList.get(rows - 1)) / priceList.get(rows - 1);
        chkDataList.add(chkData);
    }

    private void sysMACDLMChk(String mode, String para) {
        String[] paras = para.split(" ");
        String para0 = paras[0];
        String[] ps = para0.split(",");
        int bp = Integer.parseInt(ps[0]);
        int t1 = Integer.parseInt(ps[1]);
        int t2 = Integer.parseInt(ps[2]);
        CheckData chkData = new CheckData(mode, para0);
        chkData.amount = paras[1];

        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        livermore = new Livermore(true, t1, t2);
        strategy = new Strategy(this);
        strategy.macd = macd;
        strategy.livermore = livermore;

        for (int i = 0; i < rows; i++) {
            livermore.arithmetic(priceList.get(i));
            if (mode.equals("BARLML")) {
                strategy.barLMLCrossTrade(i, bp);
            } else if (mode.equals("BARLMS")) {
                strategy.barLMSCrossTrade(i, bp);
            } else if (mode.equals("DIFLML")) {
                strategy.difLMLCrossTrade(i, bp);
            } else if (mode.equals("DIFLMS")) {
                strategy.difLMSCrossTrade(i, bp);
            }
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.size() > spIndexList.size()) {
            chkData.status = "持有";
            chkData.days = daysBetween(dateList, bpIndexList.get(bpIndexList.size() - 1), rows - 1);
        } else {
            chkData.status = "清空";
            chkData.days = daysBetween(dateList, spIndexList.get(spIndexList.size() - 1), rows - 1);
        }

        double lmKey = livermore.getLMKey(mode);
        double macdKey = macd.getMACDKey(mode, bp);
        chkData.key = (lmKey > macdKey) ? lmKey : macdKey;
        chkData.percent = 100 * (chkData.key - priceList.get(rows - 1)) / priceList.get(rows - 1);
        chkDataList.add(chkData);
    }

    public void tradeModelEva(String mode, String para) {
        String[] paras = para.replaceAll(" ", "").split(",");

        switch (mode) {
            case "MA":
                jTabbedPaneSys.setSelectedIndex(1);
                jTextFieldMAS.setText(paras[0]);
                jTextFieldMAL.setText(paras[1]);
                break;
            case "LML":
                jTabbedPaneSys.setSelectedIndex(2);
                jTextFieldTp1.setText(paras[0]);
                jTextFieldTp2.setText(paras[1]);
                jRadioButtonLML.setSelected(true);
                break;
            case "LMS":
                jTabbedPaneSys.setSelectedIndex(2);
                jTextFieldTp1.setText(paras[0]);
                jTextFieldTp2.setText(paras[1]);
                jRadioButtonLMS.setSelected(true);
                break;
            case "BAR":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdBar.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jCheckBoxAddSys.setSelected(false);
                break;
            case "DIF":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdDif.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jCheckBoxAddSys.setSelected(false);
                break;
            case "BARDIF":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdBar.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jTextFieldBp1.setText(paras[1]);
                jCheckBoxAddSys.setSelected(true);
                jRadioButtonAddDif.setSelected(true);
                break;
            case "BARMA":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdBar.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jCheckBoxAddSys.setSelected(true);
                jRadioButtonAddMa.setSelected(true);
                jTextFieldMAS.setText(paras[1]);
                jTextFieldMAL.setText(paras[2]);
                break;
            case "DIFMA":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdDif.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jCheckBoxAddSys.setSelected(true);
                jRadioButtonAddMa.setSelected(true);
                jTextFieldMAS.setText(paras[1]);
                jTextFieldMAL.setText(paras[2]);
                break;
            case "BARLML":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdBar.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jCheckBoxAddSys.setSelected(true);
                jRadioButtonAddLm.setSelected(true);
                jRadioButtonLML.setSelected(true);
                jTextFieldTp1.setText(paras[1]);
                jTextFieldTp2.setText(paras[2]);
                break;
            case "BARLMS":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdBar.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jCheckBoxAddSys.setSelected(true);
                jRadioButtonAddLm.setSelected(true);
                jRadioButtonLMS.setSelected(true);
                jTextFieldTp1.setText(paras[1]);
                jTextFieldTp2.setText(paras[2]);
                break;
            case "DIFLML":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdDif.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jCheckBoxAddSys.setSelected(true);
                jRadioButtonAddLm.setSelected(true);
                jRadioButtonLML.setSelected(true);
                jTextFieldTp1.setText(paras[1]);
                jTextFieldTp2.setText(paras[2]);
                break;
            case "DIFLMS":
                jTabbedPaneSys.setSelectedIndex(0);
                jRadioButtonMacdDif.setSelected(true);
                jTextFieldBp0.setText(paras[0]);
                jCheckBoxAddSys.setSelected(true);
                jRadioButtonAddLm.setSelected(true);
                jRadioButtonLMS.setSelected(true);
                jTextFieldTp1.setText(paras[1]);
                jTextFieldTp2.setText(paras[2]);
                break;
            default:
                break;
        }

        jButtonTradeEva.doClick();
    }

    public void getTradeMode() {
        switch (jTabbedPaneSys.getSelectedIndex()) {
            case 0:
                tradeMode = (jRadioButtonMacdBar.isSelected()) ? "BAR" : "DIF";
                tradePara = jTextFieldBp0.getText();
                if (jCheckBoxAddSys.isSelected()) {
                    if (jRadioButtonAddDif.isSelected()) {
                        tradeMode = "BARDIF";
                        tradePara += "," + jTextFieldBp1.getText();
                    } else if (jRadioButtonAddMa.isSelected()) {
                        tradeMode += "MA";
                        tradePara += "," + jTextFieldMAS.getText() + "," + jTextFieldMAL.getText();
                    } else {
                        tradeMode += (jRadioButtonLML.isSelected()) ? "LML" : "LMS";
                        tradePara += "," + jTextFieldTp1.getText() + "," + jTextFieldTp2.getText();
                    }
                }
                break;
            case 1:
                tradeMode = "MA";
                tradePara = jTextFieldMAS.getText() + "," + jTextFieldMAL.getText();
                break;
            case 2:
                tradeMode = (jRadioButtonLML.isSelected()) ? "LML" : "LMS";
                tradePara = jTextFieldTp1.getText() + "," + jTextFieldTp2.getText();
                break;
        }
    }

    private boolean synthesize(int grade) {
        if (strategy.bpIdxList.size() > strategy.spIdxList.size()) {
            strategy.spIdxList.add(eIdx);
        }
        if (grade == 0) {
            bpIndexList = strategy.bpIdxList;
            spIndexList = strategy.spIdxList;
        } else {
            if ((rows < rows2) || (!dateList.get(rows - 1).equals(dateList2.get(rows2 - 1)))) {
                return false;
            }
            int offset = rows - rows2;
            bpIndexList = new ArrayList<>();
            spIndexList = new ArrayList<>();
            for (int i = 0; i < strategy.bpIdxList.size(); i++) {
                if (strategy.spIdxList.get(i) > offset) {
                    bpIndexList.add((strategy.bpIdxList.get(i) > offset) ? (strategy.bpIdxList.get(i) - offset) : 0);
                    spIndexList.add(strategy.spIdxList.get(i) - offset);
                }
            }
        }
        if (bpIndexList.isEmpty()) {
            return false;
        }
        handle = new Handle(this);
        fundList = handle.synthesize();
        return true;
    }

    private void dateProcess() {
        String start = jTextFieldSDate.getText();
        String end = jTextFieldEDate.getText();
        if ((end.compareTo(start) <= 0)) {
            JOptionPane.showMessageDialog(this, "起始日期必须早于结束日期！");
            tradeDays = 0;
            return;
        }

        sIdx = -1;
        eIdx = 0;
        for (int i = 0; i < rows; i++) {
            if ((dateList.get(i).compareTo(start) >= 0) && (dateList.get(i).compareTo(end) <= 0)) {
                if (sIdx == -1) {
                    sIdx = i;
                }
                eIdx = i;
            }
        }
        tradeDays = eIdx - sIdx + 1;
    }

    protected void parseStatus(int status) {
        switch (status) {
            case 1:
                jLabelStatus.setText("主上升！");
                jLabelStatus.setForeground(new java.awt.Color(255, 0, 0));
                break;
            case 2:
                jLabelStatus.setText("自然回撤");
                jLabelStatus.setForeground(new java.awt.Color(255, 51, 51));
                break;
            case 3:
                jLabelStatus.setText("自然回升");
                jLabelStatus.setForeground(new java.awt.Color(255, 51, 51));
                break;
            case 4:
                jLabelStatus.setText("次级回撤");
                jLabelStatus.setForeground(new java.awt.Color(255, 153, 153));
                break;
            case 5:
                jLabelStatus.setText("次级回升");
                jLabelStatus.setForeground(new java.awt.Color(255, 153, 153));
                break;
            case -1:
                jLabelStatus.setText("主下降！");
                jLabelStatus.setForeground(new java.awt.Color(0, 153, 0));
                break;
            case -2:
                jLabelStatus.setText("自然回升");
                jLabelStatus.setForeground(new java.awt.Color(51, 255, 51));
                break;
            case -3:
                jLabelStatus.setText("自然回撤");
                jLabelStatus.setForeground(new java.awt.Color(51, 255, 51));
                break;
            case -4:
                jLabelStatus.setText("次级回升");
                jLabelStatus.setForeground(new java.awt.Color(153, 255, 153));
                break;
            case -5:
                jLabelStatus.setText("次级回撤");
                jLabelStatus.setForeground(new java.awt.Color(153, 255, 153));
                break;
            default:
                break;
        }
    }

    protected void updateMarket(int grade, int idx) {
        if (grade == 0) {
            jLabelDate.setText("日期：" + dateList.get(idx));
            double margin = closeList.get(idx) - closeList.get(idx - 1);
            double ratio = 100 * (closeList.get(idx) - closeList.get(idx - 1)) / closeList.get(idx - 1);
            if (margin > 0) {
                jLabelClose.setForeground(new java.awt.Color(250, 0, 0));
                jLabelClose.setText(String.format("收盘：%s  上涨：%.2f/%5.2f%%", closeList.get(idx), margin, ratio));
            } else {
                jLabelClose.setForeground(new java.awt.Color(0, 150, 0));
                jLabelClose.setText(String.format("收盘：%s  下跌：%.2f/%5.2f%%", closeList.get(idx), margin, ratio));
            }
        } else {
            jLabelStockName2.setText(stockName2);
            jLabelDate2.setText(dateList2.get(idx));
            double margin = closeList2.get(idx) - closeList2.get(idx - 1);
            double ratio = 100 * (closeList2.get(idx) - closeList2.get(idx - 1)) / closeList2.get(idx - 1);
            if (margin > 0) {
                jLabelClose2.setForeground(new java.awt.Color(250, 0, 0));
                jLabelClose2.setText(String.format("%s  %.2f/%5.2f%%", closeList2.get(idx), margin, ratio));
            } else {
                jLabelClose2.setForeground(new java.awt.Color(0, 150, 0));
                jLabelClose2.setText(String.format("%s  %.2f/%5.2f%%", closeList2.get(idx), margin, ratio));
            }
        }
    }

    protected SystemReport updateSystemReport(Handle hde) {
        SystemReport sr = new SystemReport();

        sr.currentAsset = (float) hde.getCurrentAsset();
        sr.initAsset = (float) hde.getInitAsset();
        sr.netProfit = (float) hde.getNetProfit();
        sr.objectRate = (float) hde.getObjectRate();
        sr.systemRate = (float) hde.getSystemRate();
        sr.sysObjRatio = (float) (sr.systemRate / sr.objectRate);
        sr.annualRate = (float) hde.getAnnualRate();
        sr.tradeYears = (float) hde.getTradeYears();
        sr.positionYears = (float) hde.getPositionYears();
        sr.positionDaysRate = (float) hde.getPositionDaysRate();
        sr.meanPositionDays = (float) hde.getMeanPositionDays();
        sr.meanGainDays = (float) hde.getMeanGainDays();
        sr.meanLossDays = (float) hde.getMeanLossDays();
        sr.standardAnnualRate = (float) hde.getStandardAnnualRate();
        sr.positionAnnualRate = (float) hde.getPositionAnnualRate();
        sr.evenEarningRate = (float) hde.getEvenEarningRate();

        sr.tradeTimes = hde.getTradeTimes();
        sr.gainTimes = hde.getGainTimes();
        sr.lossTimes = sr.tradeTimes - sr.gainTimes;
        sr.winRate = (float) hde.getWinRate();
        sr.meanGain = (float) hde.getMeanGain();
        sr.meanLoss = (float) hde.getMeanLoss();
        sr.odds = (float) hde.getOdds();
        sr.expectation = (float) hde.getExpectation();
        sr.gainProfit = (float) hde.getGainProfit();
        sr.lossProfit = (float) hde.getLossProfit();
        sr.maxGain = (float) hde.getMaxGain();
        sr.maxLoss = (float) hde.getMaxLoss();
        sr.maxGainTimes = hde.getMaxGainTimes();
        sr.maxLossTimes = hde.getMaxLossTimes();
        sr.maxGainRatio = (float) hde.getMaxGainRatio();
        sr.maxLossRatio = (float) hde.getMaxLossRatio();

        return sr;
    }

    protected SystemReport updateSimpleReport(String mode, String para, Handle hde) {
        SystemReport sr = new SystemReport(mode, para);

        sr.parameter = para;
        sr.currentAsset = (float) hde.getCurrentAsset();
        sr.standardAnnualRate = (float) hde.getStandardAnnualRate();
        sr.positionDaysRate = (float) hde.getPositionDaysRate();
        sr.positionAnnualRate = (float) hde.getPositionAnnualRate();
        sr.meanPositionDays = (float) hde.getMeanPositionDays();
        sr.tradeTimes = hde.getTradeTimes();
        sr.maxLossRatio = (float) hde.getMaxLossRatio();
        sr.expectation = (float) hde.getExpectation();

        return sr;
    }

    protected void updateTable(SystemReport sr) {
        jTablePoint.setValueAt(sr.currentAsset, 0, 1);
        jTablePoint.setValueAt(sr.initAsset, 1, 1);
        jTablePoint.setValueAt(sr.netProfit, 2, 1);
        jTablePoint.setValueAt(sr.objectRate + "%", 3, 1);
        jTablePoint.setValueAt(sr.systemRate + "%", 4, 1);
        jTablePoint.setValueAt(sr.sysObjRatio, 5, 1);
        jTablePoint.setValueAt(sr.annualRate + "%", 6, 1);
        jTablePoint.setValueAt(sr.tradeYears + "年", 7, 1);
        jTablePoint.setValueAt(sr.positionYears + "年", 8, 1);
        jTablePoint.setValueAt(sr.positionDaysRate + "%", 9, 1);
        jTablePoint.setValueAt(sr.meanPositionDays + "天", 10, 1);
        jTablePoint.setValueAt(sr.meanGainDays + "天", 11, 1);
        jTablePoint.setValueAt(sr.meanLossDays + "天", 12, 1);
        jTablePoint.setValueAt(sr.standardAnnualRate + "%", 13, 1);
        jTablePoint.setValueAt(sr.positionAnnualRate + "%", 14, 1);
        jTablePoint.setValueAt(sr.evenEarningRate + "%", 15, 1);

        jTablePoint.setValueAt(sr.tradeTimes + "次", 0, 3);
        jTablePoint.setValueAt(sr.gainTimes + "次", 1, 3);
        jTablePoint.setValueAt(sr.lossTimes + "次", 2, 3);
        jTablePoint.setValueAt(sr.winRate + "%", 3, 3);
        jTablePoint.setValueAt(sr.meanGain + "%", 4, 3);
        jTablePoint.setValueAt(sr.meanLoss + "%", 5, 3);
        jTablePoint.setValueAt(sr.odds, 6, 3);
        jTablePoint.setValueAt(sr.expectation, 7, 3);
        jTablePoint.setValueAt(sr.gainProfit, 8, 3);
        jTablePoint.setValueAt(sr.lossProfit, 9, 3);
        jTablePoint.setValueAt(sr.maxGain + "%", 10, 3);
        jTablePoint.setValueAt(sr.maxLoss + "%", 11, 3);
        jTablePoint.setValueAt(sr.maxGainTimes + "次", 12, 3);
        jTablePoint.setValueAt(sr.maxLossTimes + "次", 13, 3);
        jTablePoint.setValueAt(sr.maxGainRatio + "%", 14, 3);
        jTablePoint.setValueAt(sr.maxLossRatio + "%", 15, 3);
    }

    protected void lmFileLogger(int idx, Livermore lm, String msg) {
        if (!msg.equals("") && jCheckBoxRecord.isSelected()) {
            fileLogger("[" + dateList.get(idx) + "] " + msg);
            if (!msg.contains("趋势可能改变")) {
                fileLogger(String.format("上关键点：%-8.2f\t\t下关键点：%-8.2f", lm.riseKeyVal, lm.fallKeyVal));
                fileLogger(String.format("主上升值：%-8.2f\t\t主下降值：%-8.2f", lm.mainRiseVal, lm.mainFallVal));
                fileLogger(String.format("自然回撤：%-8.2f\t\t自然回撤：%-8.2f", lm.normalFallUVal, lm.normalFallDVal));
                fileLogger(String.format("自然回升：%-8.2f\t\t自然回升：%-8.2f", lm.normalRiseUVal, lm.normalRiseDVal));
                fileLogger(String.format("次级回撤：%-8.2f\t\t次级回撤：%-8.2f", lm.minorFallUVal, lm.minorFallDVal));
                fileLogger(String.format("次级回升：%-8.2f\t\t次级回升：%-8.2f", lm.minorRiseUVal, lm.minorRiseDVal));
            }
        }
    }

    protected void lmLogger(Livermore lm) {
        msgLogger(String.format("上关键点：%-8.2f\t\t下关键点：%-8.2f", lm.riseKeyVal, lm.fallKeyVal));
        msgLogger(String.format("主上升值：%-8.2f\t\t主下降值：%-8.2f", lm.mainRiseVal, lm.mainFallVal));
        msgLogger(String.format("自然回撤：%-8.2f\t\t自然回撤：%-8.2f", lm.normalFallUVal, lm.normalFallDVal));
        msgLogger(String.format("自然回升：%-8.2f\t\t自然回升：%-8.2f", lm.normalRiseUVal, lm.normalRiseDVal));
        msgLogger(String.format("次级回撤：%-8.2f\t\t次级回撤：%-8.2f", lm.minorFallUVal, lm.minorFallDVal));
        msgLogger(String.format("次级回升：%-8.2f\t\t次级回升：%-8.2f", lm.minorRiseUVal, lm.minorRiseDVal));
    }

    public void msgLogger(String str) {
        jTextAreaMain.append(str + System.getProperty("line.separator"));
    }

    public void fileLogger(String str) {
        if (fileWriter != null) {
            try {
                fileWriter.write(str + System.getProperty("line.separator"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    public void runExeFile(String file) {
        try {
            Runtime rt = Runtime.getRuntime();
            File exeFile = new File(file);
            if (exeFile.exists()) {
                String cmd = "cmd.exe /c " + file;
                rt.exec(cmd);
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "请先安装相关软件到根目录！");
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public int daysBetween(ArrayList<String> dates, int idxs, int idxe) {
        String sdate = dates.get(idxs);
        String edate = dates.get(idxe);
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Calendar cal = Calendar.getInstance();
        long between_days = 0;
        try {
            cal.setTime(dateFormat.parse(sdate));
            long time1 = cal.getTimeInMillis();
            cal.setTime(dateFormat.parse(edate));
            long time2 = cal.getTimeInMillis();
            between_days = (time2 - time1) / (1000 * 3600 * 24);
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        return Integer.parseInt(String.valueOf(between_days));
    }

    private String fileIn = "data\\沪深300.txt";
    private String fileOut = "data\\沪深300_测试日志.txt";
    private String fileIn2 = "data\\全指医药.txt";
    public FileWriter fileWriter;

    public String stockName = "沪深300";
    public String stockName2 = "全指医药";
    public String stockCode = "000300";
    public int rows = 0;
    public int rows2 = 0;
    public ArrayList<String> dateList;
    public ArrayList<String> dateList2;
    public ArrayList<Double> openList;
    public ArrayList<Double> highList;
    public ArrayList<Double> lowList;
    public ArrayList<Double> closeList;
    public ArrayList<Double> closeList2;
    public ArrayList<Double> priceList;
    public ArrayList<Double> priceList2;
    public ArrayList<Double> fundList;
    public ArrayList<Integer> bpIndexList;
    public ArrayList<Integer> spIndexList;
    public int sIdx = -1;
    public int eIdx = 0;
    public int tradeDays = 0;

    public Strategy strategy;
    public Handle handle;
    public Livermore livermore;
    public boolean evaluated = false;
    public RankTable rankTable;
    public int handleMode = 0;
    public String tradeMode;
    public String tradePara;
    public ArrayList<CheckData> chkDataList;

    public int lmDays = 1;
    public boolean lmStatus = true;

    public int gradeFlag = 1;
    public float MAX_LOSS = -20;   // -20%
    public float POS_RATE = 3; // 3%

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupLM;
    private javax.swing.ButtonGroup buttonGroupMACD;
    private javax.swing.ButtonGroup buttonGroupMacdAdd;
    private javax.swing.JButton jButtonCheckUp;
    private javax.swing.JButton jButtonEvaluate;
    private javax.swing.JButton jButtonFilterCheck;
    private javax.swing.JButton jButtonFilterStart;
    private javax.swing.JButton jButtonTest;
    private javax.swing.JButton jButtonTradeChart;
    private javax.swing.JButton jButtonTradeEva;
    private javax.swing.JButton jButtonTradeRecord;
    private javax.swing.JCheckBox jCheckBox2dObject;
    private javax.swing.JCheckBox jCheckBoxAddSys;
    private javax.swing.JCheckBox jCheckBoxHandleMode;
    private javax.swing.JCheckBox jCheckBoxRecord;
    private javax.swing.JComboBox<String> jComboBox2dObject;
    private javax.swing.JComboBox<String> jComboBoxLMDays;
    private javax.swing.JComboBox<String> jComboBoxLMStatus;
    private javax.swing.JComboBox<String> jComboBoxPriceFactor;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelClose2;
    private javax.swing.JLabel jLabelDash1;
    private javax.swing.JLabel jLabelDash2;
    private javax.swing.JLabel jLabelDash3;
    private javax.swing.JLabel jLabelDash4;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelDate2;
    private javax.swing.JLabel jLabelLMDays;
    private javax.swing.JLabel jLabelLMStatus;
    private javax.swing.JLabel jLabelMAL;
    private javax.swing.JLabel jLabelMAS;
    private javax.swing.JLabel jLabelMATrade;
    private javax.swing.JLabel jLabelPara1;
    private javax.swing.JLabel jLabelPara2;
    private javax.swing.JLabel jLabelPara3;
    private javax.swing.JLabel jLabelPara4;
    private javax.swing.JLabel jLabelPriceFactor;
    private javax.swing.JLabel jLabelSEDash;
    private javax.swing.JLabel jLabelSEDate;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelStockName;
    private javax.swing.JLabel jLabelStockName2;
    private javax.swing.JLabel jLabelTp1;
    private javax.swing.JLabel jLabelTp2;
    private javax.swing.JLabel jLabelbp0;
    private javax.swing.JLabel jLabelbp1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenu jMenuIndex;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemCYBZ;
    private javax.swing.JMenuItem jMenuItemClear;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemDZH;
    private javax.swing.JMenuItem jMenuItemHS300;
    private javax.swing.JMenuItem jMenuItemImport;
    private javax.swing.JMenuItem jMenuItemQZYY;
    private javax.swing.JMenuItem jMenuItemSWZQ;
    private javax.swing.JMenuItem jMenuItemSZCZ;
    private javax.swing.JMenuItem jMenuItemSZZS;
    private javax.swing.JMenuItem jMenuItemTDX;
    private javax.swing.JMenuItem jMenuItemZGHL;
    private javax.swing.JMenuItem jMenuItemZZ500;
    private javax.swing.JMenuItem jMenuItemZZJG;
    private javax.swing.JMenu jMenuRun;
    private javax.swing.JPanel jPanelLM;
    private javax.swing.JPanel jPanelMA;
    private javax.swing.JPanel jPanelMACD;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelSysFilter;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JRadioButton jRadioButtonAddDif;
    private javax.swing.JRadioButton jRadioButtonAddLm;
    private javax.swing.JRadioButton jRadioButtonAddMa;
    private javax.swing.JRadioButton jRadioButtonLML;
    private javax.swing.JRadioButton jRadioButtonLMS;
    private javax.swing.JRadioButton jRadioButtonMacdBar;
    private javax.swing.JRadioButton jRadioButtonMacdDif;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneSys;
    private javax.swing.JTable jTablePoint;
    private javax.swing.JTextArea jTextAreaMain;
    private javax.swing.JTextField jTextFieldBp0;
    private javax.swing.JTextField jTextFieldBp1;
    private javax.swing.JTextField jTextFieldEDate;
    private javax.swing.JTextField jTextFieldMAL;
    private javax.swing.JTextField jTextFieldMAS;
    private javax.swing.JTextField jTextFieldPE1;
    private javax.swing.JTextField jTextFieldPE2;
    private javax.swing.JTextField jTextFieldPE3;
    private javax.swing.JTextField jTextFieldPE4;
    private javax.swing.JTextField jTextFieldPS1;
    private javax.swing.JTextField jTextFieldPS2;
    private javax.swing.JTextField jTextFieldPS3;
    private javax.swing.JTextField jTextFieldPS4;
    private javax.swing.JTextField jTextFieldSDate;
    private javax.swing.JTextField jTextFieldTp1;
    private javax.swing.JTextField jTextFieldTp2;
    // End of variables declaration//GEN-END:variables
}
