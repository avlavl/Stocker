/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trader;

import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author zhangxr
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form StockerView
     */
    public MainView() {
        initComponents();
        setLocationRelativeTo(null);
        final URL filename = this.getClass().getResource("res/Livermore1.jpg");
        if (filename != null) {
            setIconImage(new ImageIcon(filename, "Icon").getImage());
        }

        importFile(fileIn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemClear = new javax.swing.JMenuItem();
        buttonGroupMACD = new javax.swing.ButtonGroup();
        buttonGroupMacdAdd = new javax.swing.ButtonGroup();
        buttonGroupLM = new javax.swing.ButtonGroup();
        jPanelMain = new javax.swing.JPanel();
        jLabelStockName = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePoint = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaMain = new javax.swing.JTextArea();
        jLabelSEDate = new javax.swing.JLabel();
        jLabelSEDash = new javax.swing.JLabel();
        jTextFieldSDate = new javax.swing.JTextField();
        jTextFieldEDate = new javax.swing.JTextField();
        jTabbedPaneSys = new javax.swing.JTabbedPane();
        jPanelMACD = new javax.swing.JPanel();
        jRadioButtonMacdBar = new javax.swing.JRadioButton();
        jRadioButtonMacdDif = new javax.swing.JRadioButton();
        jLabelbp = new javax.swing.JLabel();
        jTextFieldbp = new javax.swing.JTextField();
        jCheckBoxAddSys = new javax.swing.JCheckBox();
        jRadioButtonAddMa = new javax.swing.JRadioButton();
        jRadioButtonAddTrend = new javax.swing.JRadioButton();
        jPanelMA = new javax.swing.JPanel();
        jTextFieldMAS = new javax.swing.JTextField();
        jTextFieldMAL = new javax.swing.JTextField();
        jLabelMATrade = new javax.swing.JLabel();
        jLabelMAS = new javax.swing.JLabel();
        jLabelMAL = new javax.swing.JLabel();
        jPanelLM = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jCheckBoxRecord = new javax.swing.JCheckBox();
        jTextFieldTp2 = new javax.swing.JTextField();
        jLabelTp2 = new javax.swing.JLabel();
        jTextFieldTp1 = new javax.swing.JTextField();
        jLabelTp1 = new javax.swing.JLabel();
        jComboBoxLMStatus = new javax.swing.JComboBox<>();
        jLabelLMStatus = new javax.swing.JLabel();
        jComboBoxLMDays = new javax.swing.JComboBox<>();
        jLabelLMDays = new javax.swing.JLabel();
        jRadioButtonLML = new javax.swing.JRadioButton();
        jRadioButtonLMS = new javax.swing.JRadioButton();
        jLabelOpen = new javax.swing.JLabel();
        jLabelHigh = new javax.swing.JLabel();
        jLabelClose = new javax.swing.JLabel();
        jLabelLow = new javax.swing.JLabel();
        jButtonTradeChart = new javax.swing.JButton();
        jButtonTradeRecord = new javax.swing.JButton();
        jButtonTradeEva = new javax.swing.JButton();
        jLabelPriceFactor = new javax.swing.JLabel();
        jComboBoxPriceFactor = new javax.swing.JComboBox<>();
        jPanelSysFilter = new javax.swing.JPanel();
        jLabelPara1 = new javax.swing.JLabel();
        jLabelPara2 = new javax.swing.JLabel();
        jLabelPara3 = new javax.swing.JLabel();
        jLabelPara4 = new javax.swing.JLabel();
        jLabelDash1 = new javax.swing.JLabel();
        jLabelDash2 = new javax.swing.JLabel();
        jLabelDash3 = new javax.swing.JLabel();
        jLabelDash4 = new javax.swing.JLabel();
        jTextFieldPS1 = new javax.swing.JTextField();
        jTextFieldPE1 = new javax.swing.JTextField();
        jTextFieldPS2 = new javax.swing.JTextField();
        jTextFieldPE2 = new javax.swing.JTextField();
        jTextFieldPS3 = new javax.swing.JTextField();
        jTextFieldPE3 = new javax.swing.JTextField();
        jTextFieldPS4 = new javax.swing.JTextField();
        jTextFieldPE4 = new javax.swing.JTextField();
        jButtonFilterStart = new javax.swing.JButton();
        jButtonFilterCheck = new javax.swing.JButton();
        jCheckBoxBrmMode = new javax.swing.JCheckBox();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemImport = new javax.swing.JMenuItem();
        jMenuIndex = new javax.swing.JMenu();
        jMenuItemSZZS = new javax.swing.JMenuItem();
        jMenuItemSZCZ = new javax.swing.JMenuItem();
        jMenuItemCYBZ = new javax.swing.JMenuItem();
        jMenuItemHS300 = new javax.swing.JMenuItem();
        jMenuItemZXBZ = new javax.swing.JMenuItem();
        jMenuItemSZ50 = new javax.swing.JMenuItem();
        jMenuItemHSZS = new javax.swing.JMenuItem();
        jMenuItemDQSGY = new javax.swing.JMenuItem();
        jMenuItemBP500 = new javax.swing.JMenuItem();
        jMenuItemNSDK = new javax.swing.JMenuItem();
        jMenuItemHJXH = new javax.swing.JMenuItem();
        jMenuItemBLTYY = new javax.swing.JMenuItem();
        jMenuRun = new javax.swing.JMenu();
        jMenuItemDZH = new javax.swing.JMenuItem();
        jMenuItemTDX = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        jMenuItemCopy.setText("复制");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemCopy);

        jMenuItemClear.setText("清除");
        jMenuItemClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemClear);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("智能证券交易系统");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStockName.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelStockName.setForeground(new java.awt.Color(204, 0, 0));
        jLabelStockName.setText("上证指数(000001)");
        jLabelStockName.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanelMain.add(jLabelStockName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, -1, -1));

        jLabelDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelDate.setText("日期：----/--/--");
        jPanelMain.add(jLabelDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        jTablePoint.getTableHeader().setFont(new java.awt.Font("微软雅黑", 0, 12));
        jTablePoint.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTablePoint.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"当前资产", null, "交易次数", ""},
                {"起始资金", null, "盈利次数", null},
                {"净利润", null, "胜率(P)", ""},
                {"标的收益率", null, "平均盈利", null},
                {"系统收益率", null, "平均亏损", null},
                {"年化收益", null, "赔率(R)", ""},
                {"总盈利", "", "数学期望", null},
                {"总亏损", null, "测试周期", null},
                {"最大盈利", "", "持仓时间比", null},
                {"最大亏损", null, "平均持仓期", null},
                {"持仓年化率", null, "平均盈利期", null},
                {"单次均收益", null, "平均亏损期", null}
            },
            new String [] {
                "统计指标", "全部交易", "统计指标", "全部交易"
            }
        ));
        jScrollPane1.setViewportView(jTablePoint);
        if (jTablePoint.getColumnModel().getColumnCount() > 0) {
            jTablePoint.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTablePoint.getColumnModel().getColumn(0).setMaxWidth(70);
            jTablePoint.getColumnModel().getColumn(2).setPreferredWidth(70);
            jTablePoint.getColumnModel().getColumn(2).setMaxWidth(70);
        }

        jPanelMain.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 340, 222));

        jTextAreaMain.setColumns(20);
        jTextAreaMain.setFont(new java.awt.Font("仿宋", 0, 11)); // NOI18N
        jTextAreaMain.setRows(5);
        jTextAreaMain.setComponentPopupMenu(jPopupMenu1);
        jTextAreaMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextAreaMainMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaMain);

        jPanelMain.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 340, 80));

        jLabelSEDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelSEDate.setText("日期：");
        jPanelMain.add(jLabelSEDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 292, -1, -1));

        jLabelSEDash.setText("-");
        jPanelMain.add(jLabelSEDash, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 293, -1, -1));

        jTextFieldSDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldSDate.setText("1990/12/19");
        jPanelMain.add(jTextFieldSDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 75, -1));

        jTextFieldEDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldEDate.setText("2016/07/31");
        jPanelMain.add(jTextFieldEDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 290, 75, -1));

        jTabbedPaneSys.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTabbedPaneSys.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneSysStateChanged(evt);
            }
        });

        jPanelMACD.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroupMACD.add(jRadioButtonMacdBar);
        jRadioButtonMacdBar.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonMacdBar.setSelected(true);
        jRadioButtonMacdBar.setText("BAR突破交易");
        jPanelMACD.add(jRadioButtonMacdBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        buttonGroupMACD.add(jRadioButtonMacdDif);
        jRadioButtonMacdDif.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonMacdDif.setText("DIF突破交易");
        jPanelMACD.add(jRadioButtonMacdDif, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabelbp.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelbp.setText("突破点：");
        jPanelMACD.add(jLabelbp, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, -1, -1));

        jTextFieldbp.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldbp.setText("0");
        jPanelMACD.add(jTextFieldbp, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 40, -1));

        jCheckBoxAddSys.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxAddSys.setText("叠加均线或趋势参考");
        jPanelMACD.add(jCheckBoxAddSys, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        buttonGroupMacdAdd.add(jRadioButtonAddMa);
        jRadioButtonAddMa.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonAddMa.setSelected(true);
        jRadioButtonAddMa.setText("叠加均线系统");
        jPanelMACD.add(jRadioButtonAddMa, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 115, -1, -1));

        buttonGroupMacdAdd.add(jRadioButtonAddTrend);
        jRadioButtonAddTrend.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonAddTrend.setText("叠加趋势系统");
        jPanelMACD.add(jRadioButtonAddTrend, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 115, -1, -1));

        jTabbedPaneSys.addTab("MACD", jPanelMACD);

        jPanelMA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldMAS.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldMAS.setText("5");
        jPanelMA.add(jTextFieldMAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 40, -1));

        jTextFieldMAL.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldMAL.setText("10");
        jPanelMA.add(jTextFieldMAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 40, -1));

        jLabelMATrade.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMATrade.setText("均线突破均线交易：");
        jPanelMA.add(jLabelMATrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabelMAS.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMAS.setText("短期均线：");
        jPanelMA.add(jLabelMAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabelMAL.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMAL.setText("长期均线：");
        jPanelMA.add(jLabelMAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, -1));

        jTabbedPaneSys.addTab("均线", jPanelMA);

        jPanelLM.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStatus.setFont(new java.awt.Font("隶书", 1, 30)); // NOI18N
        jLabelStatus.setForeground(new java.awt.Color(255, 0, 0));
        jLabelStatus.setText("主上升!");
        jPanelLM.add(jLabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 5, -1, -1));

        jCheckBoxRecord.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxRecord.setText("生成交易日志");
        jPanelLM.add(jCheckBoxRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, -1, -1));

        jTextFieldTp2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldTp2.setText("3");
        jPanelLM.add(jTextFieldTp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 30, -1));

        jLabelTp2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelTp2.setText("TP2:");
        jPanelLM.add(jLabelTp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, -1, -1));

        jTextFieldTp1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldTp1.setText("9");
        jPanelLM.add(jTextFieldTp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 30, -1));

        jLabelTp1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelTp1.setText("TP1:");
        jPanelLM.add(jLabelTp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, -1, -1));

        jComboBoxLMStatus.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxLMStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "主上升", "主下降" }));
        jComboBoxLMStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLMStatusActionPerformed(evt);
            }
        });
        jPanelLM.add(jComboBoxLMStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 50, -1, -1));

        jLabelLMStatus.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelLMStatus.setText("起始状态：");
        jPanelLM.add(jLabelLMStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, -1, -1));

        jComboBoxLMDays.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxLMDays.setMaximumRowCount(9);
        jComboBoxLMDays.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "收盘价", "2日均线", "3日均线", "4日均线", "5日均线" }));
        jPanelLM.add(jComboBoxLMDays, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 50, -1, -1));

        jLabelLMDays.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelLMDays.setText("样本：");
        jPanelLM.add(jLabelLMDays, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 50, -1, -1));

        buttonGroupLM.add(jRadioButtonLML);
        jRadioButtonLML.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonLML.setSelected(true);
        jRadioButtonLML.setText("上升大趋势买卖");
        jPanelLM.add(jRadioButtonLML, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 90, -1, -1));

        buttonGroupLM.add(jRadioButtonLMS);
        jRadioButtonLMS.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonLMS.setText("主升阶段买卖");
        jPanelLM.add(jRadioButtonLMS, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 116, -1, -1));

        jTabbedPaneSys.addTab("趋势", jPanelLM);

        jPanelMain.add(jTabbedPaneSys, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, 320, 222));

        jLabelOpen.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelOpen.setForeground(new java.awt.Color(204, 0, 204));
        jLabelOpen.setText("开盘：");
        jPanelMain.add(jLabelOpen, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, -1, -1));

        jLabelHigh.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelHigh.setForeground(new java.awt.Color(255, 0, 0));
        jLabelHigh.setText("最高：");
        jPanelMain.add(jLabelHigh, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, -1, -1));

        jLabelClose.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(153, 51, 0));
        jLabelClose.setText("收盘：");
        jPanelMain.add(jLabelClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, -1, -1));

        jLabelLow.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelLow.setForeground(new java.awt.Color(0, 153, 0));
        jLabelLow.setText("最低：");
        jPanelMain.add(jLabelLow, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        jButtonTradeChart.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTradeChart.setText("交易曲线");
        jButtonTradeChart.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonTradeChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTradeChartActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonTradeChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 285, -1, 30));

        jButtonTradeRecord.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTradeRecord.setText("交易记录");
        jButtonTradeRecord.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonTradeRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTradeRecordActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonTradeRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 285, -1, 30));

        jButtonTradeEva.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTradeEva.setText("交易评测");
        jButtonTradeEva.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonTradeEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTradeEvaActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonTradeEva, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 285, -1, 30));

        jLabelPriceFactor.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPriceFactor.setText("系数：");
        jPanelMain.add(jLabelPriceFactor, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 292, -1, -1));

        jComboBoxPriceFactor.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxPriceFactor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "X1", "X10", "X100", "X1000" }));
        jComboBoxPriceFactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPriceFactorActionPerformed(evt);
            }
        });
        jPanelMain.add(jComboBoxPriceFactor, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 290, -1, -1));

        jPanelSysFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "优选系统", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 12))); // NOI18N
        jPanelSysFilter.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jPanelSysFilter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelPara1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPara1.setText("P1:");
        jPanelSysFilter.add(jLabelPara1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 27, -1, -1));

        jLabelPara2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPara2.setText("P2:");
        jPanelSysFilter.add(jLabelPara2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 51, -1, -1));

        jLabelPara3.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPara3.setText("P3:");
        jPanelSysFilter.add(jLabelPara3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 27, -1, -1));

        jLabelPara4.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelPara4.setText("P4:");
        jPanelSysFilter.add(jLabelPara4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 51, -1, -1));

        jLabelDash1.setText("-");
        jPanelSysFilter.add(jLabelDash1, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 29, -1, -1));

        jLabelDash2.setText("-");
        jPanelSysFilter.add(jLabelDash2, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 52, -1, -1));

        jLabelDash3.setText("-");
        jPanelSysFilter.add(jLabelDash3, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 29, -1, -1));

        jLabelDash4.setText("-");
        jPanelSysFilter.add(jLabelDash4, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 52, -1, -1));

        jTextFieldPS1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jPanelSysFilter.add(jTextFieldPS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 26, 30, -1));

        jTextFieldPE1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jPanelSysFilter.add(jTextFieldPE1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 26, 30, -1));

        jTextFieldPS2.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jPanelSysFilter.add(jTextFieldPS2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 30, -1));

        jTextFieldPE2.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jPanelSysFilter.add(jTextFieldPE2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 30, -1));

        jTextFieldPS3.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jPanelSysFilter.add(jTextFieldPS3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 26, 30, -1));

        jTextFieldPE3.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jPanelSysFilter.add(jTextFieldPE3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 26, 30, -1));

        jTextFieldPS4.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jPanelSysFilter.add(jTextFieldPS4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 30, -1));

        jTextFieldPE4.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jPanelSysFilter.add(jTextFieldPE4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 30, -1));

        jButtonFilterStart.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonFilterStart.setText("开始");
        jButtonFilterStart.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonFilterStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterStartActionPerformed(evt);
            }
        });
        jPanelSysFilter.add(jButtonFilterStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 23, 60, -1));

        jButtonFilterCheck.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonFilterCheck.setText("查看");
        jButtonFilterCheck.setEnabled(false);
        jButtonFilterCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterCheckActionPerformed(evt);
            }
        });
        jPanelSysFilter.add(jButtonFilterCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 48, 60, -1));

        jPanelMain.add(jPanelSysFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 325, 320, 88));

        jCheckBoxBrmMode.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxBrmMode.setText("固定金额投资");
        jCheckBoxBrmMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBrmModeActionPerformed(evt);
            }
        });
        jPanelMain.add(jCheckBoxBrmMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 285, -1, -1));

        getContentPane().add(jPanelMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 423));

        jMenuFile.setText("文件");

        jMenuItemImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemImport.setText("导入...");
        jMenuItemImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemImportActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemImport);

        jMenuBar.add(jMenuFile);

        jMenuIndex.setText("常用指数");

        jMenuItemSZZS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemSZZS.setText("上证指数");
        jMenuItemSZZS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSZZSActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSZZS);

        jMenuItemSZCZ.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemSZCZ.setText("深证成指");
        jMenuItemSZCZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSZCZActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSZCZ);

        jMenuItemCYBZ.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemCYBZ.setText("创业板指");
        jMenuItemCYBZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCYBZActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemCYBZ);

        jMenuItemHS300.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemHS300.setText("沪深300");
        jMenuItemHS300.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHS300ActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemHS300);

        jMenuItemZXBZ.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemZXBZ.setText("中小板指");
        jMenuItemZXBZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZXBZActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemZXBZ);

        jMenuItemSZ50.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemSZ50.setText("上证50");
        jMenuItemSZ50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSZ50ActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSZ50);

        jMenuItemHSZS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemHSZS.setText("恒生指数");
        jMenuItemHSZS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHSZSActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemHSZS);

        jMenuItemDQSGY.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_8, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemDQSGY.setText("道琼斯工业");
        jMenuItemDQSGY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDQSGYActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemDQSGY);

        jMenuItemBP500.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_9, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemBP500.setText("标普500");
        jMenuItemBP500.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBP500ActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemBP500);

        jMenuItemNSDK.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemNSDK.setText("纳斯达克");
        jMenuItemNSDK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNSDKActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemNSDK);

        jMenuItemHJXH.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemHJXH.setText("黄金现货");
        jMenuItemHJXH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHJXHActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemHJXH);

        jMenuItemBLTYY.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemBLTYY.setText("布伦特原油");
        jMenuItemBLTYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBLTYYActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemBLTYY);

        jMenuBar.add(jMenuIndex);

        jMenuRun.setText("运行");

        jMenuItemDZH.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemDZH.setText("大智慧");
        jMenuItemDZH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDZHActionPerformed(evt);
            }
        });
        jMenuRun.add(jMenuItemDZH);

        jMenuItemTDX.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemTDX.setText("通达信");
        jMenuItemTDX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTDXActionPerformed(evt);
            }
        });
        jMenuRun.add(jMenuItemTDX);

        jMenuBar.add(jMenuRun);

        jMenuHelp.setText("帮助");

        jMenuItemAbout.setText("关于");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemImportActionPerformed
        importFile(null);
    }//GEN-LAST:event_jMenuItemImportActionPerformed

    private void jMenuItemSZZSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSZZSActionPerformed
        importFile("data\\上证指数.txt");
    }//GEN-LAST:event_jMenuItemSZZSActionPerformed

    private void jMenuItemSZCZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSZCZActionPerformed
        importFile("data\\深证成指.txt");
    }//GEN-LAST:event_jMenuItemSZCZActionPerformed

    private void jMenuItemCYBZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCYBZActionPerformed
        importFile("data\\创业板指.txt");
    }//GEN-LAST:event_jMenuItemCYBZActionPerformed

    private void jMenuItemHS300ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHS300ActionPerformed
        importFile("data\\沪深300.txt");
    }//GEN-LAST:event_jMenuItemHS300ActionPerformed

    private void jMenuItemZXBZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZXBZActionPerformed
        importFile("data\\中小板指.txt");
    }//GEN-LAST:event_jMenuItemZXBZActionPerformed

    private void jMenuItemSZ50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSZ50ActionPerformed
        importFile("data\\上证50.txt");
    }//GEN-LAST:event_jMenuItemSZ50ActionPerformed

    private void jMenuItemHSZSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHSZSActionPerformed
        importFile("data\\恒生指数.txt");
    }//GEN-LAST:event_jMenuItemHSZSActionPerformed

    private void jMenuItemDQSGYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDQSGYActionPerformed
        importFile("data\\道琼斯工业.txt");
    }//GEN-LAST:event_jMenuItemDQSGYActionPerformed

    private void jMenuItemBP500ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBP500ActionPerformed
        importFile("data\\标普500.txt");
    }//GEN-LAST:event_jMenuItemBP500ActionPerformed

    private void jMenuItemNSDKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNSDKActionPerformed
        importFile("data\\纳斯达克.txt");
    }//GEN-LAST:event_jMenuItemNSDKActionPerformed

    private void jMenuItemHJXHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHJXHActionPerformed
        importFile("data\\黄金现货.txt");
    }//GEN-LAST:event_jMenuItemHJXHActionPerformed

    private void jMenuItemBLTYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBLTYYActionPerformed
        importFile("data\\布伦特原油.txt");
    }//GEN-LAST:event_jMenuItemBLTYYActionPerformed

    private void jMenuItemDZHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDZHActionPerformed
        runExeFile("C:\\dzh365\\dzh2.exe");
    }//GEN-LAST:event_jMenuItemDZHActionPerformed

    private void jMenuItemTDXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTDXActionPerformed
        runExeFile("C:\\new_tdx\\TdxW.exe");
    }//GEN-LAST:event_jMenuItemTDXActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        JOptionPane.showMessageDialog(new JFrame(), "智能证券交易系统 V16.0.7\n版权所有(C) 张向荣(Aioros Zhang)");
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jTextAreaMainMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMainMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextAreaMainMouseReleased

    private void jMenuItemClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearActionPerformed
        jTextAreaMain.setText("");
    }//GEN-LAST:event_jMenuItemClearActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        jTextAreaMain.selectAll();
        jTextAreaMain.copy();
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jButtonTradeChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTradeChartActionPerformed
        TradeChart tc = new TradeChart(this, false, this);
    }//GEN-LAST:event_jButtonTradeChartActionPerformed

    private void jButtonTradeRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTradeRecordActionPerformed
        if (evaluated) {
            TradeTable tradeTable = new TradeTable(this, false, this);
        } else {
            JOptionPane.showMessageDialog(this, "请先进行评测再查看交易记录");
        }
    }//GEN-LAST:event_jButtonTradeRecordActionPerformed

    private void jButtonTradeEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTradeEvaActionPerformed
        boolean ret = false;
        dateProcess();
        if (tradeDays == 0) {
            return;
        }
        int mode = 0;
        switch (jTabbedPaneSys.getSelectedIndex()) {
            case 0:
                mode = jRadioButtonMacdBar.isSelected() ? 0 : 1;
                double bp = Double.parseDouble(jTextFieldbp.getText());
                if (jCheckBoxAddSys.isSelected()) {
                    if (jRadioButtonAddMa.isSelected()) {
                        int mas = Integer.parseInt(jTextFieldMAS.getText());
                        int mal = Integer.parseInt(jTextFieldMAL.getText());
                        ret = sysMACDMAEva(mode, bp, mas, mal);
                    } else {
                        int mode1 = jRadioButtonLML.isSelected() ? 0 : 1;
                        int days = jComboBoxLMDays.getSelectedIndex() + 1;
                        boolean status = (jComboBoxLMStatus.getSelectedIndex() == 0);
                        int tp1 = Integer.parseInt(jTextFieldTp1.getText());
                        int tp2 = Integer.parseInt(jTextFieldTp2.getText());
                        ret = sysMACDLMEva(mode, bp, mode1, days, status, tp1, tp2);
                    }
                } else {
                    ret = sysMACDEva(mode, bp);
                }
                break;
            case 1:
                int mas = Integer.parseInt(jTextFieldMAS.getText());
                int mal = Integer.parseInt(jTextFieldMAL.getText());
                ret = sysMAEva(mas, mal);
                break;
            case 2:
                mode = jRadioButtonLML.isSelected() ? 0 : 1;
                int days = jComboBoxLMDays.getSelectedIndex() + 1;
                boolean status = (jComboBoxLMStatus.getSelectedIndex() == 0);
                int tp1 = Integer.parseInt(jTextFieldTp1.getText());
                int tp2 = Integer.parseInt(jTextFieldTp2.getText());
                ret = sysLMEva(mode, days, status, tp1, tp2);
                break;
        }

        if (!ret) {
            JOptionPane.showMessageDialog(new JFrame(), "无效的参数设置！");
            return;
        }
        SystemReport sr = updateSystemReport(strategy, brm);
        updateTable(sr);
        evaluated = true;
    }//GEN-LAST:event_jButtonTradeEvaActionPerformed

    private void jButtonFilterStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterStartActionPerformed
        long time = System.currentTimeMillis();
        jTextAreaMain.setText("");
        dateProcess();
        if (tradeDays == 0) {
            return;
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        SystemReport sr;
        ArrayList<SystemReport> srList = new ArrayList<>();
        int mode = 0;
        switch (jTabbedPaneSys.getSelectedIndex()) {
            case 0:
                mode = jRadioButtonMacdBar.isSelected() ? 0 : 1;
                int bps = Integer.parseInt(jTextFieldPS1.getText());
                int bpe = Integer.parseInt(jTextFieldPE1.getText());

                if (jCheckBoxAddSys.isSelected()) {
                    if (jRadioButtonAddMa.isSelected()) {
                        int mass = Integer.parseInt(jTextFieldPS2.getText());
                        int mase = Integer.parseInt(jTextFieldPE2.getText());
                        int mals = Integer.parseInt(jTextFieldPS3.getText());
                        int male = Integer.parseInt(jTextFieldPE3.getText());
                        for (int i = bps; i <= bpe; i++) {
                            for (int j = mass; j <= mase; j++) {
                                for (int k = mals; k <= male; k++) {
                                    if (k >= j * 2) {
                                        if (sysMACDMAEva(mode, i, j, k)) {
                                            String para = String.format("%3d,%2d,%-3d", i, j, k);
                                            sr = updateSimpleReport(para, strategy, brm);
                                            updateTextArea(sr);
                                            srList.add(sr);
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        int mode1 = jRadioButtonLML.isSelected() ? 0 : 1;
                        int days = jComboBoxLMDays.getSelectedIndex() + 1;
                        boolean status = (jComboBoxLMStatus.getSelectedIndex() == 0);
                        int tps1 = Integer.parseInt(jTextFieldPS2.getText());
                        int tpe1 = Integer.parseInt(jTextFieldPE2.getText());
                        int tps2 = Integer.parseInt(jTextFieldPS3.getText());
                        int tpe2 = Integer.parseInt(jTextFieldPE3.getText());
                        for (int i = bps; i <= bpe; i++) {
                            for (int j = tps1; j <= tpe1; j++) {
                                for (int k = tps2; k <= tpe2; k++) {
                                    if (k <= (j / 2 + 1)) {
                                        if (sysMACDLMEva(mode, i, mode1, days, status, j, k)) {
                                            String para = String.format("%3d,%2d,%-2d", i, j, k);
                                            sr = updateSimpleReport(para, strategy, brm);
                                            updateTextArea(sr);
                                            srList.add(sr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    for (int i = bps; i <= bpe; i++) {
                        if (sysMACDEva(mode, i)) {
                            String para = String.format("%3d", i);
                            sr = updateSimpleReport(para, strategy, brm);
                            updateTextArea(sr);
                            srList.add(sr);
                        }
                    }
                }

                break;
            case 1:
                int mass = Integer.parseInt(jTextFieldPS1.getText());
                int mase = Integer.parseInt(jTextFieldPE1.getText());
                int mals = Integer.parseInt(jTextFieldPS2.getText());
                int male = Integer.parseInt(jTextFieldPE2.getText());
                for (int i = mass; i <= mase; i++) {
                    for (int j = mals; j <= male; j++) {
                        if (j >= i * 2) {
                            if (sysMAEva(i, j)) {
                                String para = String.format("%2d,%-3d", i, j);
                                sr = updateSimpleReport(para, strategy, brm);
                                updateTextArea(sr);
                                srList.add(sr);
                            }
                        }
                    }
                }
                break;
            case 2:
                mode = jRadioButtonLML.isSelected() ? 0 : 1;
                int days = jComboBoxLMDays.getSelectedIndex() + 1;
                boolean status = (jComboBoxLMStatus.getSelectedIndex() == 0);
                int tps1 = Integer.parseInt(jTextFieldPS1.getText());
                int tpe1 = Integer.parseInt(jTextFieldPE1.getText());
                int tps2 = Integer.parseInt(jTextFieldPS2.getText());
                int tpe2 = Integer.parseInt(jTextFieldPE2.getText());
                for (int i = tps1; i <= tpe1; i++) {
                    for (int j = tps2; j <= tpe2; j++) {
                        if (j <= (i / 2 + 1)) {
                            if (sysLMEva(mode, days, status, i, j)) {
                                String para = String.format("%2d,%-2d", i, j);
                                sr = updateSimpleReport(para, strategy, brm);
                                updateTextArea(sr);
                                srList.add(sr);
                            }
                        }
                    }
                }
                break;
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        jButtonFilterCheck.setEnabled(true);
        Collections.sort(srList, (SystemReport arg0, SystemReport arg1) -> new Float(arg1.currentAsset).compareTo(arg0.currentAsset));
        rankTable = new RankTable(this, false, this, srList);

        time = System.currentTimeMillis() - time;
        float excTime = (float) time / 1000;
        System.out.println("Elapsed time: " + excTime + "s");
    }//GEN-LAST:event_jButtonFilterStartActionPerformed

    private void jButtonFilterCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterCheckActionPerformed
        rankTable.setVisible(true);
    }//GEN-LAST:event_jButtonFilterCheckActionPerformed

    private void jComboBoxPriceFactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPriceFactorActionPerformed
        for (int i = 0; i < rows; i++) {
            double zoomPrice = closeList.get(i) * Math.pow(10, jComboBoxPriceFactor.getSelectedIndex());
            priceList.set(i, zoomPrice);
        }
    }//GEN-LAST:event_jComboBoxPriceFactorActionPerformed

    private void jComboBoxLMStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLMStatusActionPerformed
        int status = (jComboBoxLMStatus.getSelectedIndex() == 0) ? 1 : -1;
        parseStatus(status);
    }//GEN-LAST:event_jComboBoxLMStatusActionPerformed

    private void jTabbedPaneSysStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneSysStateChanged
        jTextFieldPS1.setText("");
        jTextFieldPE1.setText("");
        jTextFieldPS2.setText("");
        jTextFieldPE2.setText("");
        jTextFieldPS3.setText("");
        jTextFieldPE3.setText("");
        switch (jTabbedPaneSys.getSelectedIndex()) {
            case 0:
                jTextFieldPS1.setText("0");
                jTextFieldPE1.setText("100");
                if (jCheckBoxAddSys.isSelected()) {
                    if (jRadioButtonAddMa.isSelected()) {
                        jTextFieldPS2.setText("1");
                        jTextFieldPE2.setText("10");
                        jTextFieldPS3.setText("10");
                        jTextFieldPE3.setText("120");
                    } else {
                        jTextFieldPS2.setText("5");
                        jTextFieldPE2.setText("12");
                        jTextFieldPS3.setText("2");
                        jTextFieldPE3.setText("6");
                    }
                }
                break;
            case 1:
                jTextFieldPS1.setText("1");
                jTextFieldPE1.setText("10");
                jTextFieldPS2.setText("10");
                jTextFieldPE2.setText("120");
                break;
            case 2:
                jTextFieldPS1.setText("5");
                jTextFieldPE1.setText("12");
                jTextFieldPS2.setText("2");
                jTextFieldPE2.setText("6");
                break;
        }
    }//GEN-LAST:event_jTabbedPaneSysStateChanged

    private void jCheckBoxBrmModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBrmModeActionPerformed
        if (jCheckBoxBrmMode.isSelected()) {
            brmMode = 1;
        } else {
            brmMode = 0;
        }
    }//GEN-LAST:event_jCheckBoxBrmModeActionPerformed

    /**
     ********************* Start of User-defined function ********************
     */
    protected void importFile(String fileName) {
        if (fileName == null) {
            JFileChooser chooser = new JFileChooser("data/");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Data File (*.txt)", "txt");
            chooser.setFileFilter(filter);
            chooser.setDialogTitle("Select Data File");
            int ret = chooser.showOpenDialog(this);
            if (ret == JFileChooser.APPROVE_OPTION) {
                fileIn = chooser.getSelectedFile().getPath();
                fileOut = fileIn.substring(0, fileIn.length() - 4) + "_测试日志.txt";
            } else {
                return;
            }
        } else {
            fileIn = fileName;
            fileOut = fileIn.substring(0, fileIn.length() - 4) + "_测试日志.txt";
        }

        try {
            File file = new File(fileIn);
            InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "gbk");
            BufferedReader br = new BufferedReader(isr);
            String[] words = br.readLine().split("\t");
            stockName = words[1];
            jLabelStockName.setText(stockName + "(" + words[0].replaceAll("[\\pP\\p{Punct}]", "") + ")");
            words = br.readLine().split("\t");
            column = words.length;
            dateList = new ArrayList<>();
            openList = new ArrayList<>();
            highList = new ArrayList<>();
            lowList = new ArrayList<>();
            closeList = new ArrayList<>();
            priceList = new ArrayList<>();
            String line;
            while ((line = br.readLine()) != null) {
                words = line.split("\t");
                dateList.add(words[0]);
                openList.add(Double.parseDouble(words[1]));
                highList.add(Double.parseDouble(words[2]));
                lowList.add(Double.parseDouble(words[3]));
                closeList.add(Double.parseDouble(words[4]));
                priceList.add(Double.parseDouble(words[4]));
            }
            rows = dateList.size();
            br.close();
            isr.close();
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        jTextFieldSDate.setText(dateList.get(0));
        jTextFieldEDate.setText(dateList.get(rows - 1));
        evaluated = false;
    }

    private boolean sysMACDEva(int mode, double bp) {
        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        strategy = new Strategy(this);
        strategy.macd = macd;

        for (int i = 0; i < rows; i++) {
            updateMarket(i);
            if ((i >= sIdx) && (i <= eIdx)) {
                if (mode == 0) {
                    strategy.barCrossTrade(i, bp);
                } else {
                    strategy.difCrossTrade(i, bp);
                }
            }
            if (i > eIdx) {
                break;
            }
        }
        if (strategy.bpIdxList.size() > strategy.spIdxList.size()) {
            strategy.spIdxList.add(eIdx);
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.isEmpty()) {
            return false;
        }

        brm = new BRM(this);
        fundList = brm.synthesize();
        return true;
    }

    private boolean sysMAEva(int mas, int mal) {
        MALine ma = new MALine(priceList);
        strategy = new Strategy(this);
        strategy.ma = ma;

        ArrayList<Double> masList = ma.getMAList(mas);
        ArrayList<Double> malList = ma.getMAList(mal);

        for (int i = 0; i < rows; i++) {
            updateMarket(i);
            if ((i >= sIdx) && (i <= eIdx)) {
                strategy.maCrossTrade(i, masList, malList);
            }
            if (i > eIdx) {
                break;
            }
        }
        if (strategy.bpIdxList.size() > strategy.spIdxList.size()) {
            strategy.spIdxList.add(eIdx);
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.isEmpty()) {
            return false;
        }

        brm = new BRM(this);
        fundList = brm.synthesize();
        return true;
    }

    private boolean sysLMEva(int mode, int days, boolean status, int t1, int t2) {
        MALine ma = new MALine(priceList);
        ArrayList<Double> maList = ma.getMAList(days);
        Livermore livermore = new Livermore(status, t1, t2);
        strategy = new Strategy(this);
        strategy.livermore = livermore;

        try {
            if (jCheckBoxRecord.isSelected()) {
                fileWriter = new FileWriter(fileOut);
            }
            for (int i = 0; i < rows; i++) {
                updateMarket(i);
                String message = livermore.arithmetic(maList.get(i));
                livermoreLogger(livermore, message);
                if ((i >= sIdx) && (i <= eIdx)) {
                    if (mode == 0) {
                        strategy.lmLongTrade(i);
                    } else {
                        strategy.lmShortTrade(i);
                    }
                }
                if (i > eIdx) {
                    break;
                }
            }
            if (jCheckBoxRecord.isSelected()) {
                fileWriter.flush();
                fileWriter.close();
            }
        } catch (IOException e1) {
        }

        if (strategy.bpIdxList.size() > strategy.spIdxList.size()) {
            strategy.spIdxList.add(eIdx);
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.isEmpty()) {
            return false;
        }

        brm = new BRM(this);
        fundList = brm.synthesize();
        parseStatus(livermore.STATUST);
        return true;
    }

    private boolean sysMACDMAEva(int mode, double bp, int mas, int mal) {
        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        MALine ma = new MALine(priceList);
        strategy = new Strategy(this);
        strategy.macd = macd;
        strategy.ma = ma;

        ArrayList<Double> masList = ma.getMAList(mas);
        ArrayList<Double> malList = ma.getMAList(mal);

        for (int i = 0; i < rows; i++) {
            updateMarket(i);
            if ((i >= sIdx) && (i <= eIdx)) {
                if (mode == 0) {
                    strategy.barMACrossTrade(i, bp, masList, malList);
                } else {
                    strategy.difMACrossTrade(i, bp, masList, malList);
                }
            }
            if (i > eIdx) {
                break;
            }
        }
        if (strategy.bpIdxList.size() > strategy.spIdxList.size()) {
            strategy.spIdxList.add(eIdx);
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.isEmpty()) {
            return false;
        }

        brm = new BRM(this);
        fundList = brm.synthesize();
        return true;
    }

    private boolean sysMACDLMEva(int mode, double bp, int mode1, int days, boolean status, int t1, int t2) {
        MACD macd = new MACD(priceList, 12, 26, 9);
        macd.init();
        MALine ma = new MALine(priceList);
        ArrayList<Double> maList = ma.getMAList(days);
        Livermore livermore = new Livermore(status, t1, t2);
        strategy = new Strategy(this);
        strategy.macd = macd;
        strategy.livermore = livermore;

        for (int i = 0; i < rows; i++) {
            updateMarket(i);
            livermore.arithmetic(maList.get(i));
            if ((i >= sIdx) && (i <= eIdx)) {
                if ((mode == 0) && (mode1 == 0)) {
                    strategy.barLMLCrossTrade(i, bp);
                } else if ((mode == 1) && (mode1 == 0)) {
                    strategy.difLMLCrossTrade(i, bp);
                } else if ((mode == 0) && (mode1 == 1)) {
                    strategy.barLMSCrossTrade(i, bp);
                } else if ((mode == 1) && (mode1 == 1)) {
                    strategy.difLMSCrossTrade(i, bp);
                }
            }
            if (i > eIdx) {
                break;
            }
        }
        if (strategy.bpIdxList.size() > strategy.spIdxList.size()) {
            strategy.spIdxList.add(eIdx);
        }
        bpIndexList = strategy.bpIdxList;
        spIndexList = strategy.spIdxList;
        if (bpIndexList.isEmpty()) {
            return false;
        }

        brm = new BRM(this);
        fundList = brm.synthesize();
        return true;
    }

    public void paraEva(String str) {
        String[] paras = str.replaceAll(" ", "").split(",");

        try {
            switch (jTabbedPaneSys.getSelectedIndex()) {
                case 0:
                    jTextFieldbp.setText(paras[0]);
                    if (jCheckBoxAddSys.isSelected()) {
                        if (jRadioButtonAddMa.isSelected()) {
                            jTextFieldMAS.setText(paras[1]);
                            jTextFieldMAS.setText(paras[2]);
                        } else {
                            jTextFieldTp1.setText(paras[1]);
                            jTextFieldTp2.setText(paras[2]);
                        }
                    }
                    break;
                case 1:
                    jTextFieldMAS.setText(paras[0]);
                    jTextFieldMAS.setText(paras[1]);
                    break;
                case 2:
                    jTextFieldTp1.setText(paras[0]);
                    jTextFieldTp2.setText(paras[1]);
                    break;
            }

            jButtonTradeEva.doClick();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "参数不匹配！");
        }
    }

    private void dateProcess() {
        String start = jTextFieldSDate.getText();
        String end = jTextFieldEDate.getText();
        if ((end.compareTo(start) <= 0)) {
            JOptionPane.showMessageDialog(this, "起始日期必须早于结束日期！");
            tradeDays = 0;
            return;
        }

        sIdx = -1;
        eIdx = 0;
        for (int i = 0; i < rows; i++) {
            if ((dateList.get(i).compareTo(start) >= 0) && (dateList.get(i).compareTo(end) <= 0)) {
                if (sIdx == -1) {
                    sIdx = i;
                }
                eIdx = i;
            }
        }
        tradeYears = (double) daysBetween(sIdx, eIdx) / 365.25;
        tradeDays = eIdx - sIdx + 1;
    }

    protected void parseStatus(int status) {
        switch (status) {
            case 1:
                jLabelStatus.setText("主上升！");
                jLabelStatus.setForeground(new java.awt.Color(255, 0, 0));
                break;
            case 2:
                jLabelStatus.setText("自然回撤");
                jLabelStatus.setForeground(new java.awt.Color(255, 51, 51));
                break;
            case 3:
                jLabelStatus.setText("自然回升");
                jLabelStatus.setForeground(new java.awt.Color(255, 51, 51));
                break;
            case 4:
                jLabelStatus.setText("次级回撤");
                jLabelStatus.setForeground(new java.awt.Color(255, 153, 153));
                break;
            case 5:
                jLabelStatus.setText("次级回升");
                jLabelStatus.setForeground(new java.awt.Color(255, 153, 153));
                break;
            case -1:
                jLabelStatus.setText("主下降！");
                jLabelStatus.setForeground(new java.awt.Color(0, 153, 0));
                break;
            case -2:
                jLabelStatus.setText("自然回升");
                jLabelStatus.setForeground(new java.awt.Color(51, 255, 51));
                break;
            case -3:
                jLabelStatus.setText("自然回撤");
                jLabelStatus.setForeground(new java.awt.Color(51, 255, 51));
                break;
            case -4:
                jLabelStatus.setText("次级回升");
                jLabelStatus.setForeground(new java.awt.Color(153, 255, 153));
                break;
            case -5:
                jLabelStatus.setText("次级回撤");
                jLabelStatus.setForeground(new java.awt.Color(153, 255, 153));
                break;
            default:
                break;
        }
    }

    protected void updateMarket(int index) {
        DATE = dateList.get(index);
        OPEN = openList.get(index);
        HIGH = highList.get(index);
        LOW = lowList.get(index);
        CLOSE = closeList.get(index);

        jLabelDate.setText("日期：" + DATE);
        jLabelOpen.setText("开盘：" + OPEN);
        jLabelHigh.setText("最高：" + HIGH);
        jLabelLow.setText("最低：" + LOW);
        jLabelClose.setText("收盘：" + CLOSE);
    }

    protected SystemReport updateSystemReport(Strategy stg, BRM brm) {
        SystemReport sr = new SystemReport();

        sr.currentAsset = (float) brm.getCurrentAsset(eIdx);
        sr.initAsset = (float) brm.getInitAsset();
        sr.netProfit = (float) brm.getNetProfit();
        sr.objectRate = (float) brm.getObjectRate(sIdx, eIdx);
        sr.earningRate = (float) brm.getEarningRate();
        sr.annualRate = (float) brm.getAnnualRate(tradeYears);
        sr.gainProfit = (float) brm.getGainProfit();
        sr.lossProfit = (float) brm.getLossProfit();
        sr.maxGain = (float) brm.getMaxGain();
        sr.maxLoss = (float) brm.getMaxLoss();
        sr.positionAnnualRate = (float) brm.getPositionAnnualRate();
        sr.evenEarningRate = (float) brm.getEvenEarningRate();
        sr.tradeTimes = brm.getTradeTimes();
        sr.gainTimes = brm.getGainTimes();
        sr.winRate = (float) brm.getWinRate();
        sr.meanGain = (float) brm.getMeanGain();
        sr.meanLoss = (float) brm.getMeanLoss();
        sr.odds = (float) brm.getOdds();
        sr.expectation = (float) brm.getExpectation();
        sr.tradeYears = (float) tradeYears;
        sr.positionDaysRate = (float) stg.getPositionDaysRate();
        sr.meanPositionDays = (float) stg.getMeanPositionDays();
        sr.meanGainDays = (float) stg.getMeanGainDays();
        sr.meanLossDays = (float) stg.getMeanLossDays();

        return sr;
    }

    protected SystemReport updateSimpleReport(String para, Strategy stg, BRM brm) {
        SystemReport sr = new SystemReport();

        sr.parameter = para;
        sr.currentAsset = (float) brm.getCurrentAsset(eIdx);
        sr.annualRate = (float) brm.getAnnualRate(tradeYears);
        sr.positionDaysRate = (float) stg.getPositionDaysRate();
        sr.positionAnnualRate = (float) brm.getPositionAnnualRate();
        sr.tradeTimes = brm.getTradeTimes();
        sr.evenEarningRate = (float) brm.getEvenEarningRate();
        sr.expectation = (float) brm.getExpectation();

        return sr;
    }

    protected void updateTable(SystemReport sr) {
        jTablePoint.setValueAt(sr.currentAsset, 0, 1);
        jTablePoint.setValueAt(sr.initAsset, 1, 1);
        jTablePoint.setValueAt(sr.netProfit, 2, 1);
        jTablePoint.setValueAt(sr.objectRate + "%", 3, 1);
        jTablePoint.setValueAt(sr.earningRate + "%", 4, 1);
        jTablePoint.setValueAt(sr.annualRate + "%", 5, 1);
        jTablePoint.setValueAt(sr.gainProfit, 6, 1);
        jTablePoint.setValueAt(sr.lossProfit, 7, 1);
        jTablePoint.setValueAt(sr.maxGain + "%", 8, 1);
        jTablePoint.setValueAt(sr.maxLoss + "%", 9, 1);
        jTablePoint.setValueAt(sr.positionAnnualRate + "%", 10, 1);
        jTablePoint.setValueAt(sr.evenEarningRate + "%", 11, 1);

        jTablePoint.setValueAt(sr.tradeTimes + "次", 0, 3);
        jTablePoint.setValueAt(sr.gainTimes + "次", 1, 3);
        jTablePoint.setValueAt(sr.winRate + "%", 2, 3);
        jTablePoint.setValueAt(sr.meanGain + "%", 3, 3);
        jTablePoint.setValueAt(sr.meanLoss + "%", 4, 3);
        jTablePoint.setValueAt(sr.odds, 5, 3);
        jTablePoint.setValueAt(sr.expectation, 6, 3);
        jTablePoint.setValueAt(sr.tradeYears + "年", 7, 3);
        jTablePoint.setValueAt(sr.positionDaysRate + "%", 8, 3);
        jTablePoint.setValueAt(sr.meanPositionDays + "天", 9, 3);
        jTablePoint.setValueAt(sr.meanGainDays + "天", 10, 3);
        jTablePoint.setValueAt(sr.meanLossDays + "天", 11, 3);
    }

    protected void updateTextArea(SystemReport sr) {
        jTextAreaMain.append(String.format("参数:%s  ", sr.parameter));
        jTextAreaMain.append(String.format("当前资产:%-8.2f  ", sr.currentAsset));
        jTextAreaMain.append(String.format("年化率:%5.2f%%  ", sr.annualRate));
        jTextAreaMain.append(String.format("持仓时间比:%5.2f%%  ", sr.positionDaysRate));
        jTextAreaMain.append(String.format("持仓年化:%6.2f%%  ", sr.positionAnnualRate));
        jTextAreaMain.append(String.format("交易次数:%-3d  ", sr.tradeTimes));
        jTextAreaMain.append(String.format("单次均收益:%5.2f%%  ", sr.evenEarningRate));
        jTextAreaMain.append(String.format("数学期望:%5.2f", sr.expectation));
        jTextAreaMain.append(System.getProperty("line.separator"));
    }

    protected void livermoreLogger(Livermore lm, String msg) {
        if (!msg.equals("") && jCheckBoxRecord.isSelected()) {
            fileLogger("[" + DATE + "] " + msg);
            if (!msg.contains("趋势可能改变")) {
                fileLogger(String.format("上关键点：%-8.2f\t\t上关键点：%-8.2f", lm.riseKeyHead, lm.fallKeyHead));
                fileLogger(String.format("下关键点：%-8.2f\t\t下关键点：%-8.2f", lm.riseKeyFoot, lm.fallKeyFoot));
                fileLogger(String.format("主上升值：%-8.2f\t\t主下降值：%-8.2f", lm.mainRiseVal, lm.mainFallVal));
                fileLogger(String.format("自然回撤：%-8.2f\t\t自然回撤：%-8.2f", lm.normalFallUVal, lm.normalFallDVal));
                fileLogger(String.format("自然回升：%-8.2f\t\t自然回升：%-8.2f", lm.normalRiseUVal, lm.normalRiseDVal));
                fileLogger(String.format("次级回撤：%-8.2f\t\t次级回撤：%-8.2f", lm.minorFallUVal, lm.minorFallDVal));
                fileLogger(String.format("次级回升：%-8.2f\t\t次级回升：%-8.2f", lm.minorRiseUVal, lm.minorRiseDVal));
            }
        }
    }

    public void msgLogger(String str) {
        jTextAreaMain.append(str + System.getProperty("line.separator"));
    }

    public void fileLogger(String str) {
        if (fileWriter != null) {
            try {
                fileWriter.write(str + System.getProperty("line.separator"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    public void runExeFile(String file) {
        try {
            Runtime rt = Runtime.getRuntime();
            File exeFile = new File(file);
            if (exeFile.exists()) {
                String cmd = "cmd.exe /c " + file;
                rt.exec(cmd);
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "请先安装相关软件到根目录！");
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public int daysBetween(int idxs, int idxe) {
        String sdate = dateList.get(idxs);
        String edate = dateList.get(idxe);
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Calendar cal = Calendar.getInstance();
        long between_days = 0;
        try {
            cal.setTime(dateFormat.parse(sdate));
            long time1 = cal.getTimeInMillis();
            cal.setTime(dateFormat.parse(edate));
            long time2 = cal.getTimeInMillis();
            between_days = (time2 - time1) / (1000 * 3600 * 24);
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        return Integer.parseInt(String.valueOf(between_days));
    }

    private String fileIn = "data\\上证指数.txt";
    private String fileOut = "data\\上证指数_测试日志.txt";
    public FileWriter fileWriter;

    public String stockName = "上证指数";
    public int column = 0;
    public int rows = 0;
    public ArrayList<String> dateList;
    public ArrayList<Double> openList;
    public ArrayList<Double> highList;
    public ArrayList<Double> lowList;
    public ArrayList<Double> closeList;
    public ArrayList<Double> priceList;
    public ArrayList<Double> fundList;
    public ArrayList<Integer> bpIndexList;
    public ArrayList<Integer> spIndexList;
    public String DATE = "";
    public double OPEN = 0;
    public double HIGH = 0;
    public double LOW = 0;
    public double CLOSE = 0;
    public int sIdx = -1;
    public int eIdx = 0;
    public int tradeDays = 0;
    public double tradeYears = 0;

    public Strategy strategy;
    public BRM brm;
    public boolean evaluated = false;
    public RankTable rankTable;
    public int brmMode = 0;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupLM;
    private javax.swing.ButtonGroup buttonGroupMACD;
    private javax.swing.ButtonGroup buttonGroupMacdAdd;
    private javax.swing.JButton jButtonFilterCheck;
    private javax.swing.JButton jButtonFilterStart;
    private javax.swing.JButton jButtonTradeChart;
    private javax.swing.JButton jButtonTradeEva;
    private javax.swing.JButton jButtonTradeRecord;
    private javax.swing.JCheckBox jCheckBoxAddSys;
    private javax.swing.JCheckBox jCheckBoxBrmMode;
    private javax.swing.JCheckBox jCheckBoxRecord;
    private javax.swing.JComboBox<String> jComboBoxLMDays;
    private javax.swing.JComboBox<String> jComboBoxLMStatus;
    private javax.swing.JComboBox<String> jComboBoxPriceFactor;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelDash1;
    private javax.swing.JLabel jLabelDash2;
    private javax.swing.JLabel jLabelDash3;
    private javax.swing.JLabel jLabelDash4;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelHigh;
    private javax.swing.JLabel jLabelLMDays;
    private javax.swing.JLabel jLabelLMStatus;
    private javax.swing.JLabel jLabelLow;
    private javax.swing.JLabel jLabelMAL;
    private javax.swing.JLabel jLabelMAS;
    private javax.swing.JLabel jLabelMATrade;
    private javax.swing.JLabel jLabelOpen;
    private javax.swing.JLabel jLabelPara1;
    private javax.swing.JLabel jLabelPara2;
    private javax.swing.JLabel jLabelPara3;
    private javax.swing.JLabel jLabelPara4;
    private javax.swing.JLabel jLabelPriceFactor;
    private javax.swing.JLabel jLabelSEDash;
    private javax.swing.JLabel jLabelSEDate;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelStockName;
    private javax.swing.JLabel jLabelTp1;
    private javax.swing.JLabel jLabelTp2;
    private javax.swing.JLabel jLabelbp;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenu jMenuIndex;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemBLTYY;
    private javax.swing.JMenuItem jMenuItemBP500;
    private javax.swing.JMenuItem jMenuItemCYBZ;
    private javax.swing.JMenuItem jMenuItemClear;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemDQSGY;
    private javax.swing.JMenuItem jMenuItemDZH;
    private javax.swing.JMenuItem jMenuItemHJXH;
    private javax.swing.JMenuItem jMenuItemHS300;
    private javax.swing.JMenuItem jMenuItemHSZS;
    private javax.swing.JMenuItem jMenuItemImport;
    private javax.swing.JMenuItem jMenuItemNSDK;
    private javax.swing.JMenuItem jMenuItemSZ50;
    private javax.swing.JMenuItem jMenuItemSZCZ;
    private javax.swing.JMenuItem jMenuItemSZZS;
    private javax.swing.JMenuItem jMenuItemTDX;
    private javax.swing.JMenuItem jMenuItemZXBZ;
    private javax.swing.JMenu jMenuRun;
    private javax.swing.JPanel jPanelLM;
    private javax.swing.JPanel jPanelMA;
    private javax.swing.JPanel jPanelMACD;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelSysFilter;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JRadioButton jRadioButtonAddMa;
    private javax.swing.JRadioButton jRadioButtonAddTrend;
    private javax.swing.JRadioButton jRadioButtonLML;
    private javax.swing.JRadioButton jRadioButtonLMS;
    private javax.swing.JRadioButton jRadioButtonMacdBar;
    private javax.swing.JRadioButton jRadioButtonMacdDif;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneSys;
    private javax.swing.JTable jTablePoint;
    private javax.swing.JTextArea jTextAreaMain;
    private javax.swing.JTextField jTextFieldEDate;
    private javax.swing.JTextField jTextFieldMAL;
    private javax.swing.JTextField jTextFieldMAS;
    private javax.swing.JTextField jTextFieldPE1;
    private javax.swing.JTextField jTextFieldPE2;
    private javax.swing.JTextField jTextFieldPE3;
    private javax.swing.JTextField jTextFieldPE4;
    private javax.swing.JTextField jTextFieldPS1;
    private javax.swing.JTextField jTextFieldPS2;
    private javax.swing.JTextField jTextFieldPS3;
    private javax.swing.JTextField jTextFieldPS4;
    private javax.swing.JTextField jTextFieldSDate;
    private javax.swing.JTextField jTextFieldTp1;
    private javax.swing.JTextField jTextFieldTp2;
    private javax.swing.JTextField jTextFieldbp;
    // End of variables declaration//GEN-END:variables
}
