/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trader;

import static Trader.FormulaLib.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author zhangxr
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form StockerView
     */
    public MainView() {
        initComponents();
        setLocationRelativeTo(null);
        final URL filename = this.getClass().getResource("res/Livermore1.jpg");
        if (filename != null) {
            setIconImage(new ImageIcon(filename, "Icon").getImage());
        }

        importFile(fileIn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemClear = new javax.swing.JMenuItem();
        buttonGroupMACD = new javax.swing.ButtonGroup();
        jPanelMain = new javax.swing.JPanel();
        jLabelStockName = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePoint = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaMain = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldStartDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldEndDate = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelMACD = new javax.swing.JPanel();
        jRadioButtonMacdBar = new javax.swing.JRadioButton();
        jRadioButtonMacdDif = new javax.swing.JRadioButton();
        jButtonMacdEva = new javax.swing.JButton();
        jLabelbp = new javax.swing.JLabel();
        jTextFieldbp = new javax.swing.JTextField();
        jPanelTrend = new javax.swing.JPanel();
        jPanelConfig = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxStatus = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTpoint1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldTpoint2 = new javax.swing.JTextField();
        jCheckBoxVpoint = new javax.swing.JCheckBox();
        jTextFieldVpoint = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxMode = new javax.swing.JComboBox<>();
        jCheckBoxRecord = new javax.swing.JCheckBox();
        jLabelStatus = new javax.swing.JLabel();
        jButtonTrendEva = new javax.swing.JButton();
        jPanelMA = new javax.swing.JPanel();
        jButtonMAEva = new javax.swing.JButton();
        jLabelOpen = new javax.swing.JLabel();
        jLabelHigh = new javax.swing.JLabel();
        jLabelClose = new javax.swing.JLabel();
        jLabelLow = new javax.swing.JLabel();
        jButtonTechChart = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemImport = new javax.swing.JMenuItem();
        jMenuIndex = new javax.swing.JMenu();
        jMenuItemSZZS = new javax.swing.JMenuItem();
        jMenuItemSZCZ = new javax.swing.JMenuItem();
        jMenuItemCYBZ = new javax.swing.JMenuItem();
        jMenuItemHS300 = new javax.swing.JMenuItem();
        jMenuItemZXBZ = new javax.swing.JMenuItem();
        jMenuItemSZ50 = new javax.swing.JMenuItem();
        jMenuItemHSZS = new javax.swing.JMenuItem();
        jMenuItemBSHJ = new javax.swing.JMenuItem();
        jMenuTestSystem = new javax.swing.JMenu();
        jMenuItemTrend = new javax.swing.JMenuItem();
        jMenuItemMACD = new javax.swing.JMenuItem();
        jMenuItemMA = new javax.swing.JMenuItem();

        jMenuItemCopy.setText("复制");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemCopy);

        jMenuItemClear.setText("清除");
        jMenuItemClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemClear);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("证券交易系统");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStockName.setFont(new java.awt.Font("微软雅黑", 0, 16)); // NOI18N
        jLabelStockName.setForeground(new java.awt.Color(204, 0, 0));
        jLabelStockName.setText("上证指数(000001)");
        jLabelStockName.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanelMain.add(jLabelStockName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, -1, -1));

        jLabelDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelDate.setText("日期：----/--/--");
        jPanelMain.add(jLabelDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        jTablePoint.getTableHeader().setFont(new java.awt.Font("微软雅黑", 0, 12));
        jTablePoint.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTablePoint.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"起始资金", null, "交易次数", ""},
                {"当前资产", null, "盈利次数", null},
                {"净利润", null, "胜率(P)", ""},
                {"标的收益率", null, "平均盈利", null},
                {"系统收益率", null, "平均亏损", null},
                {"年化收益", null, "赔率(R)", ""},
                {"总盈利", "", "数学期望", null},
                {"总亏损", null, "测试周期", null},
                {"最大盈利", "", "持仓时间比", null},
                {"最大亏损", null, "平均持仓期", null},
                {"持仓年化率", null, "平均盈利期", null},
                {"交易收益率", null, "平均亏损期", null}
            },
            new String [] {
                "统计指标", "全部交易", "统计指标", "全部交易"
            }
        ));
        jScrollPane1.setViewportView(jTablePoint);
        if (jTablePoint.getColumnModel().getColumnCount() > 0) {
            jTablePoint.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTablePoint.getColumnModel().getColumn(0).setMaxWidth(70);
            jTablePoint.getColumnModel().getColumn(2).setPreferredWidth(70);
            jTablePoint.getColumnModel().getColumn(2).setMaxWidth(70);
        }

        jPanelMain.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 86, 340, 220));

        jTextAreaMain.setColumns(20);
        jTextAreaMain.setFont(new java.awt.Font("仿宋", 0, 11)); // NOI18N
        jTextAreaMain.setRows(5);
        jTextAreaMain.setComponentPopupMenu(jPopupMenu1);
        jTextAreaMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextAreaMainMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaMain);

        jPanelMain.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 340, 80));

        jLabel7.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel7.setText("起始日期：");
        jPanelMain.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        jTextFieldStartDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldStartDate.setText("1990/05/14");
        jPanelMain.add(jTextFieldStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 320, 80, -1));

        jLabel8.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel8.setText("结束日期：");
        jPanelMain.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, -1, -1));

        jTextFieldEndDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldEndDate.setText("2016/07/31");
        jPanelMain.add(jTextFieldEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, 80, -1));

        jTabbedPane1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jPanelMACD.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroupMACD.add(jRadioButtonMacdBar);
        jRadioButtonMacdBar.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonMacdBar.setSelected(true);
        jRadioButtonMacdBar.setText("BAR突破交易");
        jPanelMACD.add(jRadioButtonMacdBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        buttonGroupMACD.add(jRadioButtonMacdDif);
        jRadioButtonMacdDif.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jRadioButtonMacdDif.setText("DIF突破交易");
        jPanelMACD.add(jRadioButtonMacdDif, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jButtonMacdEva.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonMacdEva.setText("评测");
        jButtonMacdEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMacdEvaActionPerformed(evt);
            }
        });
        jPanelMACD.add(jButtonMacdEva, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 260, -1, -1));

        jLabelbp.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelbp.setText("突破点：");
        jPanelMACD.add(jLabelbp, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, -1, -1));

        jTextFieldbp.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldbp.setText("0");
        jPanelMACD.add(jTextFieldbp, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, 40, -1));

        jTabbedPane1.addTab("MACD", jPanelMACD);

        jPanelTrend.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelConfig.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "配置", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 12))); // NOI18N
        jPanelConfig.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel1.setText("起始状态：");
        jPanelConfig.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, -1, -1));

        jComboBoxStatus.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "主上升", "主下降" }));
        jComboBoxStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStatusActionPerformed(evt);
            }
        });
        jPanelConfig.add(jComboBoxStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel2.setText("弹抽点：");
        jPanelConfig.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jTextFieldTpoint1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldTpoint1.setText("10");
        jPanelConfig.add(jTextFieldTpoint1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 30, -1));

        jLabel3.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel3.setText("反转点：");
        jPanelConfig.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, -1, -1));

        jTextFieldTpoint2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldTpoint2.setText("5");
        jPanelConfig.add(jTextFieldTpoint2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 30, -1));

        jCheckBoxVpoint.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxVpoint.setText("使能V形反转");
        jPanelConfig.add(jCheckBoxVpoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jTextFieldVpoint.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldVpoint.setText("20");
        jPanelConfig.add(jTextFieldVpoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 30, -1));

        jLabel9.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel9.setText("模式：");
        jPanelConfig.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jComboBoxMode.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxMode.setMaximumRowCount(9);
        jComboBoxMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "收盘价", "2日均线", "3日均线", "5日均线", "K线实体", "K线引线" }));
        jPanelConfig.add(jComboBoxMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, -1));

        jCheckBoxRecord.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxRecord.setText("生成交易日志");
        jPanelConfig.add(jCheckBoxRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jPanelTrend.add(jPanelConfig, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 310, 210));

        jLabelStatus.setFont(new java.awt.Font("隶书", 1, 30)); // NOI18N
        jLabelStatus.setForeground(new java.awt.Color(255, 0, 0));
        jLabelStatus.setText("主上升!");
        jPanelTrend.add(jLabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jButtonTrendEva.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTrendEva.setText("评测");
        jButtonTrendEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrendEvaActionPerformed(evt);
            }
        });
        jPanelTrend.add(jButtonTrendEva, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        jTabbedPane1.addTab("趋势", jPanelTrend);

        jPanelMA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonMAEva.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonMAEva.setText("评测");
        jButtonMAEva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMAEvaActionPerformed(evt);
            }
        });
        jPanelMA.add(jButtonMAEva, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 260, -1, -1));

        jTabbedPane1.addTab("均线", jPanelMA);

        jPanelMain.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, 340, 340));

        jLabelOpen.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelOpen.setForeground(new java.awt.Color(204, 0, 204));
        jLabelOpen.setText("开盘：");
        jPanelMain.add(jLabelOpen, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, -1));

        jLabelHigh.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelHigh.setForeground(new java.awt.Color(255, 0, 0));
        jLabelHigh.setText("最高：");
        jPanelMain.add(jLabelHigh, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, -1, -1));

        jLabelClose.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(153, 51, 0));
        jLabelClose.setText("收盘：");
        jPanelMain.add(jLabelClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        jLabelLow.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelLow.setForeground(new java.awt.Color(0, 153, 0));
        jLabelLow.setText("最低：");
        jPanelMain.add(jLabelLow, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, -1, -1));

        jButtonTechChart.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonTechChart.setText("技术分析");
        jButtonTechChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTechChartActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonTechChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        getContentPane().add(jPanelMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 440));

        jMenuFile.setText("文件");

        jMenuItemImport.setText("导入...");
        jMenuItemImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemImportActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemImport);

        jMenuBar.add(jMenuFile);

        jMenuIndex.setText("常用指数");

        jMenuItemSZZS.setText("上证指数");
        jMenuItemSZZS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSZZSActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSZZS);

        jMenuItemSZCZ.setText("深证成指");
        jMenuItemSZCZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSZCZActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSZCZ);

        jMenuItemCYBZ.setText("创业板指");
        jMenuItemCYBZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCYBZActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemCYBZ);

        jMenuItemHS300.setText("沪深300");
        jMenuItemHS300.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHS300ActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemHS300);

        jMenuItemZXBZ.setText("中小板指");
        jMenuItemZXBZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZXBZActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemZXBZ);

        jMenuItemSZ50.setText("上证50");
        jMenuItemSZ50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSZ50ActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemSZ50);

        jMenuItemHSZS.setText("恒生指数");
        jMenuItemHSZS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHSZSActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemHSZS);

        jMenuItemBSHJ.setText("博时黄金");
        jMenuItemBSHJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBSHJActionPerformed(evt);
            }
        });
        jMenuIndex.add(jMenuItemBSHJ);

        jMenuBar.add(jMenuIndex);

        jMenuTestSystem.setText("测试系统");

        jMenuItemTrend.setText("趋势");
        jMenuItemTrend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTrendActionPerformed(evt);
            }
        });
        jMenuTestSystem.add(jMenuItemTrend);

        jMenuItemMACD.setText("MACD");
        jMenuItemMACD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMACDActionPerformed(evt);
            }
        });
        jMenuTestSystem.add(jMenuItemMACD);

        jMenuItemMA.setText("均线");
        jMenuItemMA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMAActionPerformed(evt);
            }
        });
        jMenuTestSystem.add(jMenuItemMA);

        jMenuBar.add(jMenuTestSystem);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemImportActionPerformed
        importFile(null);
    }//GEN-LAST:event_jMenuItemImportActionPerformed

    private void jMenuItemSZZSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSZZSActionPerformed
        importFile("data\\上证指数.txt");
    }//GEN-LAST:event_jMenuItemSZZSActionPerformed

    private void jMenuItemSZCZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSZCZActionPerformed
        importFile("data\\深证成指.txt");
    }//GEN-LAST:event_jMenuItemSZCZActionPerformed

    private void jMenuItemCYBZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCYBZActionPerformed
        importFile("data\\创业板指.txt");
    }//GEN-LAST:event_jMenuItemCYBZActionPerformed

    private void jMenuItemHS300ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHS300ActionPerformed
        importFile("data\\沪深300.txt");
    }//GEN-LAST:event_jMenuItemHS300ActionPerformed

    private void jMenuItemZXBZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZXBZActionPerformed
        importFile("data\\中小板指.txt");
    }//GEN-LAST:event_jMenuItemZXBZActionPerformed

    private void jMenuItemSZ50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSZ50ActionPerformed
        importFile("data\\上证50.txt");
    }//GEN-LAST:event_jMenuItemSZ50ActionPerformed

    private void jMenuItemHSZSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHSZSActionPerformed
        importFile("data\\恒生指数.txt");
    }//GEN-LAST:event_jMenuItemHSZSActionPerformed

    private void jMenuItemBSHJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBSHJActionPerformed
        importFile("data\\博时黄金.txt");
    }//GEN-LAST:event_jMenuItemBSHJActionPerformed

    private void jMenuItemTrendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTrendActionPerformed
        System.out.println("TODO");
    }//GEN-LAST:event_jMenuItemTrendActionPerformed

    private void jMenuItemMACDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMACDActionPerformed
        System.out.println("TODO");
    }//GEN-LAST:event_jMenuItemMACDActionPerformed

    private void jMenuItemMAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMAActionPerformed
        System.out.println("TODO");
    }//GEN-LAST:event_jMenuItemMAActionPerformed

    private void jTextAreaMainMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMainMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextAreaMainMouseReleased

    private void jMenuItemClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearActionPerformed
        jTextAreaMain.setText("");
    }//GEN-LAST:event_jMenuItemClearActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        jTextAreaMain.selectAll();
        jTextAreaMain.copy();
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jButtonTechChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTechChartActionPerformed
        TechChart tc = new TechChart(this, false, this);
    }//GEN-LAST:event_jButtonTechChartActionPerformed

    private void jComboBoxStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStatusActionPerformed
        String status = (jComboBoxStatus.getSelectedIndex() == 0) ? "mainRiseStatus" : "mainFallStatus";
        parseStatus(status);
    }//GEN-LAST:event_jComboBoxStatusActionPerformed

    private void jButtonTrendEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrendEvaActionPerformed
        tradeDays = dateProcess();
        if (tradeDays == 0) {
            return;
        }

        boolean status = (jComboBoxStatus.getSelectedIndex() == 0);
        int t1 = Integer.parseInt(jTextFieldTpoint1.getText());
        int t2 = Integer.parseInt(jTextFieldTpoint2.getText());
        Livermore livermore = new Livermore(status, t1, t2);
        livermore.vpointEnable = jCheckBoxVpoint.isSelected();
        livermore.vpointValue = Integer.parseInt(jTextFieldVpoint.getText());
        BRM brm = new BRM(this);
        Strategy strategy = new Strategy(this, brm);
        strategy.livermore = livermore;
        fundList = new ArrayList<>();

        try {
            if (jCheckBoxRecord.isSelected()) {
                fileWriter = new FileWriter(fileOut);
            }

            for (int i = 0; i < rows; i++) {
                updateMarket(i);
                doLivermore(livermore, i);
                if ((i >= sIdx) && (i <= eIdx)) {
                    strategy.livermoreTrade(i);
                }
                if (i > eIdx) {
                    break;
                }
            }
            if (strategy.bpIndexList.size() > strategy.spIndexList.size()) {
                strategy.spIndexList.add(eIdx);
            }
            fundList = brm.synthesize(strategy);
            parseStatus(livermore.Status);
            updateTable(brm, strategy);
            evaluated = true;

            if (jCheckBoxRecord.isSelected()) {
                fileWriter.flush();
                fileWriter.close();
            }
        } catch (IOException e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_jButtonTrendEvaActionPerformed

    private void jButtonMacdEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMacdEvaActionPerformed
        tradeDays = dateProcess();
        if (tradeDays == 0) {
            return;
        }

        MACD macd = new MACD(closeList, 12, 26, 9);
        macd.init();
        BRM brm = new BRM(this);
        Strategy strategy = new Strategy(this, brm);
        strategy.macd = macd;
        fundList = new ArrayList<>();
        double bp = Double.parseDouble(jTextFieldbp.getText());

        for (int i = 0; i < rows; i++) {
            updateMarket(i);
            if ((i >= sIdx) && (i <= eIdx)) {
                if (jRadioButtonMacdBar.isSelected()) {
                    strategy.barCrossTrade(i, bp);
                } else {
                    strategy.difCrossTrade(i, bp);
                }
            }
            if (i > eIdx) {
                break;
            }
        }
        if (strategy.bpIndexList.size() > strategy.spIndexList.size()) {
            strategy.spIndexList.add(eIdx);
        }
        fundList = brm.synthesize(strategy);

        updateTable(brm, strategy);
        evaluated = true;
    }//GEN-LAST:event_jButtonMacdEvaActionPerformed

    private void jButtonMAEvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMAEvaActionPerformed
        tradeDays = dateProcess();
        if (tradeDays == 0) {
            return;
        }

        MALine ma = new MALine(closeList);
        BRM brm = new BRM(this);
        Strategy strategy = new Strategy(this, brm);
        strategy.ma = ma;
        ArrayList<Double> ma10List = ma.getMAList(10);
        fundList = new ArrayList<>();

        for (int i = 0; i < rows; i++) {
            updateMarket(i);
            if ((i >= sIdx) && (i <= eIdx)) {
                strategy.maCrossTrade(ma10List, i);
            }
            if (i > eIdx) {
                break;
            }
        }
        if (strategy.bpIndexList.size() > strategy.spIndexList.size()) {
            strategy.spIndexList.add(eIdx);
        }
        fundList = brm.synthesize(strategy);

        updateTable(brm, strategy);
        evaluated = true;
    }//GEN-LAST:event_jButtonMAEvaActionPerformed

    /**
     ********************* Start of User-defined function ********************
     */
    protected void importFile(String fileName) {
        if (fileName == null) {
            JFileChooser chooser = new JFileChooser("data/");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Data File (*.txt)", "txt");
            chooser.setFileFilter(filter);
            chooser.setDialogTitle("Select Data File");
            int ret = chooser.showOpenDialog(this);
            if (ret == JFileChooser.APPROVE_OPTION) {
                fileIn = chooser.getSelectedFile().getPath();
                fileOut = fileIn.substring(0, fileIn.length() - 4) + "_测试日志.txt";
            } else {
                return;
            }
        } else {
            fileIn = fileName;
            fileOut = fileIn.substring(0, fileIn.length() - 4) + "_测试日志.txt";
        }

        try {
            File file = new File(fileIn);
            InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "gbk");
            BufferedReader br = new BufferedReader(isr);
            String[] words = br.readLine().split("\t");
            stockName = words[1];
            jLabelStockName.setText(stockName + "(" + words[0].replaceAll("[\\pP\\p{Punct}]", "") + ")");
            words = br.readLine().split("\t");
            column = words.length;
            dateList = new ArrayList<>();
            openList = new ArrayList<>();
            highList = new ArrayList<>();
            lowList = new ArrayList<>();
            closeList = new ArrayList<>();
            String line;
            while ((line = br.readLine()) != null) {
                words = line.split("\t");
                dateList.add(words[0]);
                openList.add(Double.parseDouble(words[1]));
                highList.add(Double.parseDouble(words[2]));
                lowList.add(Double.parseDouble(words[3]));
                closeList.add(Double.parseDouble(words[4]));
            }
            rows = dateList.size();
            br.close();
            isr.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        evaluated = false;
    }

    private int dateProcess() {
        String start = jTextFieldStartDate.getText();
        String end = jTextFieldEndDate.getText();
        if ((end.compareTo(start) <= 0)) {
            JOptionPane.showMessageDialog(this, "起始日期必须早于结束日期！");
            return 0;
        }

        sIdx = -1;
        eIdx = 0;
        for (int i = 0; i < rows; i++) {
            if ((dateList.get(i).compareTo(start) >= 0) && (dateList.get(i).compareTo(end) <= 0)) {
                if (sIdx == -1) {
                    sIdx = i;
                }
                eIdx = i;
            }
        }
        int len = eIdx - sIdx + 1;
        return len;
    }

    protected void doLivermore(Livermore livermore, int idx) {
        double price;
        String message;
        switch (jComboBoxMode.getSelectedIndex()) {
            case 0:
                price = CLOSE;
                message = livermore.arithmetic(price);
                livermoreLogger(livermore, message);
                break;
            case 1:
                if (idx > 0) {
                    price = MA(closeList, idx, 2);
                    message = livermore.arithmetic(price);
                    livermoreLogger(livermore, message);
                }
                break;
            case 2:
                if (idx > 1) {
                    price = MA(closeList, idx, 3);
                    message = livermore.arithmetic(price);
                    livermoreLogger(livermore, message);
                }
                break;
            case 3:
                if (idx > 3) {
                    price = MA(closeList, idx, 5);
                    message = livermore.arithmetic(price);
                    livermoreLogger(livermore, message);
                }
                break;
            case 4:
                price = OPEN;
                message = livermore.arithmetic(price);
                livermoreLogger(livermore, message);
                price = CLOSE;
                message = livermore.arithmetic(price);
                livermoreLogger(livermore, message);
                break;
            case 5:
                price = CLOSE > OPEN ? LOW : HIGH;
                message = livermore.arithmetic(price);
                livermoreLogger(livermore, message);
                price = CLOSE > OPEN ? HIGH : LOW;
                message = livermore.arithmetic(price);
                livermoreLogger(livermore, message);
                break;
        }
    }

    protected void parseStatus(String status) {
        switch (status) {
            case "mainRiseStatus":
                jLabelStatus.setText("主上升！");
                jLabelStatus.setForeground(new java.awt.Color(255, 0, 0));
                break;
            case "normalFallUStatus":
                jLabelStatus.setText("自然回撤");
                jLabelStatus.setForeground(new java.awt.Color(255, 51, 51));
                break;
            case "normalRiseUStatus":
                jLabelStatus.setText("自然回升");
                jLabelStatus.setForeground(new java.awt.Color(255, 51, 51));
                break;
            case "minorFallUStatus":
                jLabelStatus.setText("次级回撤");
                jLabelStatus.setForeground(new java.awt.Color(255, 153, 153));
                break;
            case "minorRiseUStatus":
                jLabelStatus.setText("次级回升");
                jLabelStatus.setForeground(new java.awt.Color(255, 153, 153));
                break;
            case "mainFallStatus":
                jLabelStatus.setText("主下降！");
                jLabelStatus.setForeground(new java.awt.Color(0, 153, 0));
                break;
            case "normalRiseDStatus":
                jLabelStatus.setText("自然回升");
                jLabelStatus.setForeground(new java.awt.Color(51, 255, 51));
                break;
            case "normalFallDStatus":
                jLabelStatus.setText("自然回撤");
                jLabelStatus.setForeground(new java.awt.Color(51, 255, 51));
                break;
            case "minorRiseDStatus":
                jLabelStatus.setText("次级回升");
                jLabelStatus.setForeground(new java.awt.Color(153, 255, 153));
                break;
            case "minorFallDStatus":
                jLabelStatus.setText("次级回撤");
                jLabelStatus.setForeground(new java.awt.Color(153, 255, 153));
                break;
            default:
                break;
        }
    }

    protected void updateMarket(int index) {
        DATE = dateList.get(index);
        OPEN = openList.get(index);
        HIGH = highList.get(index);
        LOW = lowList.get(index);
        CLOSE = closeList.get(index);

        jLabelDate.setText("日期：" + DATE);
        jLabelOpen.setText("开盘：" + OPEN);
        jLabelHigh.setText("最高：" + HIGH);
        jLabelLow.setText("最低：" + LOW);
        jLabelClose.setText("收盘：" + CLOSE);
    }

    protected void updateTable(BRM brm, Strategy stg) {
        jTablePoint.setValueAt((float) brm.getInitAsset(), 0, 1);
        jTablePoint.setValueAt((float) brm.getCurrentAsset(CLOSE), 1, 1);
        jTablePoint.setValueAt((float) brm.getNetProfit(), 2, 1);
        jTablePoint.setValueAt((float) brm.getObjectRate(CLOSE) + "%", 3, 1);
        jTablePoint.setValueAt((float) brm.getEarningRate() + "%", 4, 1);
        jTablePoint.setValueAt((float) brm.getAnnualRate((double) tradeDays / 244) + "%", 5, 1);
        jTablePoint.setValueAt((float) brm.getGainProfit(), 6, 1);
        jTablePoint.setValueAt((float) brm.getLossProfit(), 7, 1);
        jTablePoint.setValueAt((float) brm.getMaxGain(), 8, 1);
        jTablePoint.setValueAt((float) brm.getMaxLoss(), 9, 1);
        jTablePoint.setValueAt((float) brm.getAnnualRate((double) stg.getPositionDays() / 244) + "%", 10, 1);
        jTablePoint.setValueAt((float) brm.getEvenEarningRate() + "%", 11, 1);

        jTablePoint.setValueAt(brm.getTradeTimes(), 0, 3);
        jTablePoint.setValueAt(brm.getGainTimes(), 1, 3);
        jTablePoint.setValueAt((float) brm.getWinRate(), 2, 3);
        jTablePoint.setValueAt((float) brm.getMeanGain(), 3, 3);
        jTablePoint.setValueAt((float) brm.getMeanLoss(), 4, 3);
        jTablePoint.setValueAt((float) brm.getOdds(), 5, 3);
        jTablePoint.setValueAt((float) brm.getExpectation(), 6, 3);
        jTablePoint.setValueAt((float) tradeDays / 244 + "年", 7, 3);
        jTablePoint.setValueAt((float) stg.getPositionDaysRate() + "%", 8, 3);
        jTablePoint.setValueAt((float) stg.getMeanPositionDays() + "天", 9, 3);
        jTablePoint.setValueAt((float) stg.getMeanGainDays() + "天", 10, 3);
        jTablePoint.setValueAt((float) stg.getMeanLossDays() + "天", 11, 3);
    }

    protected void livermoreLogger(Livermore lm, String msg) {
        if (!msg.equals("") && jCheckBoxRecord.isSelected()) {
            msgLogger(msg);
            fileLogger("[" + DATE + "] " + msg);
            if (!msg.contains("趋势可能改变")) {
                fileLogger("上关键点：" + lm.riseKeyHead
                        + "\t\t上关键点：" + lm.fallKeyHead
                        + "\r\n下关键点：" + lm.riseKeyFoot
                        + "\t\t下关键点：" + lm.fallKeyFoot
                        + "\r\n主上升值：" + lm.mainRiseVal
                        + "\t\t主下降值：" + lm.mainFallVal
                        + "\r\n自然回撤：" + lm.normalFallUVal
                        + "\t\t自然回撤：" + lm.normalFallDVal
                        + "\r\n自然回升：" + lm.normalRiseUVal
                        + "\t\t自然回升：" + lm.normalRiseDVal
                        + "\r\n次级回撤：" + lm.minorFallUVal
                        + "\t\t次级回撤：" + lm.minorFallDVal
                        + "\r\n次级回升：" + lm.minorRiseUVal
                        + "\t\t次级回升：" + lm.minorRiseDVal);
            }
        }
    }

    public void msgLogger(String str) {
        jTextAreaMain.append(str + System.getProperty("line.separator"));
    }

    public void fileLogger(String str) {
        if (fileWriter != null) {
            try {
                fileWriter.write(str + System.getProperty("line.separator"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private String fileIn = "data\\上证指数.txt";
    private String fileOut = "data\\上证指数_测试日志.txt";
    public FileWriter fileWriter;

    public String stockName = "上证指数";
    public int column = 15;
    public int rows = 0;
    public ArrayList<String> dateList;
    public ArrayList<Double> openList;
    public ArrayList<Double> highList;
    public ArrayList<Double> lowList;
    public ArrayList<Double> closeList;
    public ArrayList<Double> fundList;
    public String DATE = "";
    public double OPEN = 0;
    public double HIGH = 0;
    public double LOW = 0;
    public double CLOSE = 0;
    public int sIdx = -1;
    public int eIdx = 0;
    public int tradeDays = 0;

    public boolean evaluated = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupMACD;
    private javax.swing.JButton jButtonMAEva;
    private javax.swing.JButton jButtonMacdEva;
    private javax.swing.JButton jButtonTechChart;
    private javax.swing.JButton jButtonTrendEva;
    private javax.swing.JCheckBox jCheckBoxRecord;
    private javax.swing.JCheckBox jCheckBoxVpoint;
    private javax.swing.JComboBox<String> jComboBoxMode;
    private javax.swing.JComboBox<String> jComboBoxStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelHigh;
    private javax.swing.JLabel jLabelLow;
    private javax.swing.JLabel jLabelOpen;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelStockName;
    private javax.swing.JLabel jLabelbp;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuIndex;
    private javax.swing.JMenuItem jMenuItemBSHJ;
    private javax.swing.JMenuItem jMenuItemCYBZ;
    private javax.swing.JMenuItem jMenuItemClear;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemHS300;
    private javax.swing.JMenuItem jMenuItemHSZS;
    private javax.swing.JMenuItem jMenuItemImport;
    private javax.swing.JMenuItem jMenuItemMA;
    private javax.swing.JMenuItem jMenuItemMACD;
    private javax.swing.JMenuItem jMenuItemSZ50;
    private javax.swing.JMenuItem jMenuItemSZCZ;
    private javax.swing.JMenuItem jMenuItemSZZS;
    private javax.swing.JMenuItem jMenuItemTrend;
    private javax.swing.JMenuItem jMenuItemZXBZ;
    private javax.swing.JMenu jMenuTestSystem;
    private javax.swing.JPanel jPanelConfig;
    private javax.swing.JPanel jPanelMA;
    private javax.swing.JPanel jPanelMACD;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelTrend;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JRadioButton jRadioButtonMacdBar;
    private javax.swing.JRadioButton jRadioButtonMacdDif;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTablePoint;
    private javax.swing.JTextArea jTextAreaMain;
    private javax.swing.JTextField jTextFieldEndDate;
    private javax.swing.JTextField jTextFieldStartDate;
    private javax.swing.JTextField jTextFieldTpoint1;
    private javax.swing.JTextField jTextFieldTpoint2;
    private javax.swing.JTextField jTextFieldVpoint;
    private javax.swing.JTextField jTextFieldbp;
    // End of variables declaration//GEN-END:variables
}
