/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Stagging;

import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author zhangxr
 */
public class UnderwrTable extends javax.swing.JDialog {

    /**
     * Creates new form UnderwrTable
     */
    public UnderwrTable(java.awt.Frame parent, boolean modal, ArrayList<Underwriter> list) {
        super(parent, modal);
        initComponents();

        uwList = list;
        uwSize = list.size();
        jTableUnderwriter.getTableHeader().setFont(new java.awt.Font("微软雅黑", 0, 12));
        jTableUnderwriter.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        int rows = (uwSize > 20) ? 20 : uwSize;
        String[][] tableContent = new String[rows][8];
        for (int i = 0; i < rows; i++) {
            tableContent[i][0] = uwList.get(i).name;
            tableContent[i][1] = "" + uwList.get(i).count;
            tableContent[i][2] = uwList.get(i).winCount + " : " + (uwList.get(i).count - uwList.get(i).winCount);
            tableContent[i][3] = String.format("%.2f%%", uwList.get(i).winRatio * 100);
            tableContent[i][4] = String.format("%.2f%%", uwList.get(i).totalGain);
            tableContent[i][5] = String.format("$%.1f", uwList.get(i).totalEarn);
            tableContent[i][6] = String.format("%.2f%%", uwList.get(i).evenGain);
            tableContent[i][7] = String.format("$%.1f", uwList.get(i).evenEarn);
        }
        jTableUnderwriter.setModel(new javax.swing.table.DefaultTableModel(
                tableContent,
                new String[]{
                    "承销商", "承销次数", "胜负比", "胜率", "累计涨幅", "累计收益", "平均涨幅", "平均收益"}
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        jScrollPaneUnderwriter.setViewportView(jTableUnderwriter);
        jTableUnderwriter.getColumnModel().getColumn(0).setMinWidth(85);
        jTableUnderwriter.getColumnModel().getColumn(1).setMaxWidth(60);
        jTableUnderwriter.getColumnModel().getColumn(2).setMaxWidth(60);
        jTableUnderwriter.getColumnModel().getColumn(3).setMaxWidth(70);

        setPreferredSize(new java.awt.Dimension(620, 20 * rows + 88));
        jScrollPaneUnderwriter.setPreferredSize(new java.awt.Dimension(585, 20 * rows + 30));
        getContentPane().add(jScrollPaneUnderwriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        pack();
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    public void updateTable(int idx) {
        int rows = (uwSize > 20) ? 20 : uwSize;
        for (int i = 0; i < rows; i++) {
            jTableUnderwriter.setValueAt(uwList.get(i + idx).name, i, 0);
            jTableUnderwriter.setValueAt(uwList.get(i + idx).count, i, 1);
            jTableUnderwriter.setValueAt(uwList.get(i + idx).winCount + " : " + (uwList.get(i + idx).count - uwList.get(i + idx).winCount), i, 2);
            jTableUnderwriter.setValueAt(String.format("%.2f%%", uwList.get(i + idx).winRatio * 100), i, 3);
            jTableUnderwriter.setValueAt(String.format("%.2f%%", uwList.get(i + idx).totalGain), i, 4);
            jTableUnderwriter.setValueAt(String.format("$%.1f", uwList.get(i + idx).totalEarn), i, 5);
            jTableUnderwriter.setValueAt(String.format("%.2f%%", uwList.get(i + idx).evenGain), i, 6);
            jTableUnderwriter.setValueAt(String.format("$%.1f", uwList.get(i + idx).evenEarn), i, 7);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneUnderwriter = new javax.swing.JScrollPane();
        jTableUnderwriter = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("交易系统排名");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPaneUnderwriter.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jScrollPaneUnderwriter.setPreferredSize(new java.awt.Dimension(452, 20));

        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(JLabel.CENTER);
        jTableUnderwriter.setDefaultRenderer(Object.class, tcr);
        jTableUnderwriter.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTableUnderwriter.getTableHeader().setFont(new java.awt.Font("微软雅黑", 0, 12));
        jTableUnderwriter.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTableUnderwriter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "承销商", "承销次数", "胜负比", "胜率", "累计涨幅", "累计收益", "平均涨幅", "平均收益"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableUnderwriter.setRowHeight(20);
        jTableUnderwriter.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRankHeaderMouseClicked(evt);
            }
        });
        jTableUnderwriter.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jTableUnderwriterMouseWheelMoved(evt);
            }
        });
        jScrollPaneUnderwriter.setViewportView(jTableUnderwriter);
        if (jTableUnderwriter.getColumnModel().getColumnCount() > 0) {
            jTableUnderwriter.getColumnModel().getColumn(0).setMinWidth(85);
            jTableUnderwriter.getColumnModel().getColumn(1).setMaxWidth(70);
            jTableUnderwriter.getColumnModel().getColumn(2).setMaxWidth(70);
        }

        getContentPane().add(jScrollPaneUnderwriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 580, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableUnderwriterMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jTableUnderwriterMouseWheelMoved
        if (evt.getWheelRotation() > 0) {
            if (rankIndex < uwSize - 20) {
                rankIndex += 10;
                if (rankIndex > uwSize - 20) {
                    rankIndex = uwSize - 20;
                }
                updateTable(rankIndex);
            }
        } else if (rankIndex > 0) {
            rankIndex -= 10;
            if (rankIndex < 0) {
                rankIndex = 0;
            }
            updateTable(rankIndex);
        }
    }//GEN-LAST:event_jTableUnderwriterMouseWheelMoved

    private void jTableRankHeaderMouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getClickCount() > 1) {
            int index = jTableUnderwriter.columnAtPoint(evt.getPoint());
            jTableUnderwriter.setColumnSelectionAllowed(true);
            jTableUnderwriter.setRowSelectionAllowed(false);
            jTableUnderwriter.setColumnSelectionInterval(index, index);
            switch (index) {
                case 0:
                    Collections.sort(uwList, (Underwriter arg0, Underwriter arg1) -> new String(arg1.name).compareTo(arg0.name));
                    break;
                case 1:
                    Collections.sort(uwList, (Underwriter arg0, Underwriter arg1) -> new Integer(arg1.count).compareTo(arg0.count));
                    break;
                case 3:
                    Collections.sort(uwList, (Underwriter arg0, Underwriter arg1) -> new Float(arg1.winRatio).compareTo(arg0.winRatio));
                    break;
                case 4:
                    Collections.sort(uwList, (Underwriter arg0, Underwriter arg1) -> new Float(arg1.totalGain).compareTo(arg0.totalGain));
                    break;
                case 5:
                    Collections.sort(uwList, (Underwriter arg0, Underwriter arg1) -> new Float(arg1.totalEarn).compareTo(arg0.totalEarn));
                    break;
                case 6:
                    Collections.sort(uwList, (Underwriter arg0, Underwriter arg1) -> new Float(arg1.evenGain).compareTo(arg0.evenGain));
                    break;
                case 7:
                    Collections.sort(uwList, (Underwriter arg0, Underwriter arg1) -> new Float(arg1.evenEarn).compareTo(arg0.evenEarn));
                    break;
                default:
                    break;
            }
            rankIndex = 0;
            updateTable(rankIndex);
        }
    }

    private ArrayList<Underwriter> uwList;
    private int rankIndex = 0;
    private int uwSize = 1;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPaneUnderwriter;
    private javax.swing.JTable jTableUnderwriter;
    // End of variables declaration//GEN-END:variables
}
