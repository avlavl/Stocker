/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stocker;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author zhangxr
 */
public class StockerView extends javax.swing.JFrame {

    /**
     * Creates new form StockerView
     */
    public StockerView() {
        initComponents();
        setLocationRelativeTo(null);

        final URL filename = this.getClass().getResource("resources/Livermore1.jpg");
        if (filename != null) {
            setIconImage(new ImageIcon(filename, "Icon").getImage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMain = new javax.swing.JPanel();
        jLabelStockName = new javax.swing.JLabel();
        jLabelStockCode = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePoint = new javax.swing.JTable();
        jPanelPrice = new javax.swing.JPanel();
        jLabelOpen = new javax.swing.JLabel();
        jLabelClose = new javax.swing.JLabel();
        jLabelHigh = new javax.swing.JLabel();
        jLabelLow = new javax.swing.JLabel();
        jLabelMA2 = new javax.swing.JLabel();
        jLabelMA3 = new javax.swing.JLabel();
        jLabelMA5 = new javax.swing.JLabel();
        jLabelMA4 = new javax.swing.JLabel();
        jLabelMA10 = new javax.swing.JLabel();
        jLabelMA20 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldStartDate = new javax.swing.JTextField();
        jTextFieldEndDate = new javax.swing.JTextField();
        jButtonImport = new javax.swing.JButton();
        jButtonRead = new javax.swing.JButton();
        jButtonContinuous = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxMode = new javax.swing.JComboBox<>();
        jCheckBoxVpoint = new javax.swing.JCheckBox();
        jTextFieldVpoint = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxStartStatus = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaMain = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemImport = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Stocker");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStockName.setFont(new java.awt.Font("华文行楷", 0, 18)); // NOI18N
        jLabelStockName.setForeground(new java.awt.Color(0, 0, 255));
        jLabelStockName.setText("上证指数");
        jLabelStockName.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanelMain.add(jLabelStockName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabelStockCode.setFont(new java.awt.Font("黑体", 0, 16)); // NOI18N
        jLabelStockCode.setForeground(new java.awt.Color(0, 0, 255));
        jLabelStockCode.setText("(000001)");
        jPanelMain.add(jLabelStockCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, -1, -1));

        jLabelStatus.setFont(new java.awt.Font("隶书", 1, 30)); // NOI18N
        jLabelStatus.setForeground(new java.awt.Color(255, 0, 0));
        jLabelStatus.setText("主上升!");
        jPanelMain.add(jLabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));

        jLabelDate.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        jLabelDate.setText("日期：----/--/--");
        jPanelMain.add(jLabelDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, -1));

        jTablePoint.getTableHeader().setFont(new java.awt.Font("微软雅黑", 0, 12));
        jTablePoint.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTablePoint.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"上关键点", null, "上关键点", null},
                {"下关键点", null, "下关键点", null},
                {"主上升", null, "主下降", null},
                {"自然回撤", null, "自然回撤", null},
                {"自然回升", null, "自然回升", null},
                {"次级回撤", null, "次级回撤", null},
                {"次级回升", null, "次级回升", null}
            },
            new String [] {
                "上升趋势", "值", "下降趋势", "值"
            }
        ));
        jScrollPane1.setViewportView(jTablePoint);

        jPanelMain.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 330, 142));

        jPanelPrice.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "行情", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微软雅黑", 0, 12))); // NOI18N
        jPanelPrice.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelOpen.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelOpen.setText("开盘：");
        jPanelPrice.add(jLabelOpen, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabelClose.setFont(new java.awt.Font("微软雅黑", 1, 13)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(255, 0, 153));
        jLabelClose.setText("收盘：");
        jPanelPrice.add(jLabelClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, -1, -1));

        jLabelHigh.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelHigh.setText("最高：");
        jPanelPrice.add(jLabelHigh, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabelLow.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelLow.setText("最低：");
        jPanelPrice.add(jLabelLow, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, -1, -1));

        jLabelMA2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMA2.setText("MA2：");
        jPanelPrice.add(jLabelMA2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabelMA3.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMA3.setText("MA3：");
        jPanelPrice.add(jLabelMA3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, -1, -1));

        jLabelMA5.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMA5.setText("MA5：");
        jPanelPrice.add(jLabelMA5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, -1, -1));

        jLabelMA4.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMA4.setText("MA4：");
        jPanelPrice.add(jLabelMA4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jLabelMA10.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMA10.setText("MA10：");
        jPanelPrice.add(jLabelMA10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabelMA20.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabelMA20.setText("MA20：");
        jPanelPrice.add(jLabelMA20, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));

        jPanelMain.add(jPanelPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 270, 130));

        jLabel7.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel7.setText("起始日期：");
        jPanelMain.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 240, -1, -1));

        jLabel8.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel8.setText("结束日期：");
        jPanelMain.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 240, -1, -1));

        jTextFieldStartDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldStartDate.setText("2015/01/04");
        jPanelMain.add(jTextFieldStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 240, 80, -1));

        jTextFieldEndDate.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldEndDate.setText("2016/04/22");
        jPanelMain.add(jTextFieldEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 240, 80, -1));

        jButtonImport.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonImport.setText("导入");
        jButtonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonImport, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 280, -1, -1));

        jButtonRead.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonRead.setText("读取");
        jButtonRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonRead, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 280, -1, -1));

        jButtonContinuous.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonContinuous.setText("连续");
        jButtonContinuous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonContinuousActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonContinuous, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 280, -1, -1));

        jButtonReset.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jButtonReset.setText("复位");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });
        jPanelMain.add(jButtonReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 280, -1, -1));

        jLabel9.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel9.setText("模式：");
        jPanelMain.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, -1, -1));

        jComboBoxMode.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxMode.setMaximumRowCount(9);
        jComboBoxMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "收盘价", "2日均线", "3日均线", "4日均线", "5日均线", "10日均线", "20日均线", "K线实体", "K线引线" }));
        jComboBoxMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxModeActionPerformed(evt);
            }
        });
        jPanelMain.add(jComboBoxMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, -1, -1));

        jCheckBoxVpoint.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jCheckBoxVpoint.setText("使能V形反转");
        jPanelMain.add(jCheckBoxVpoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jTextFieldVpoint.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jTextFieldVpoint.setText("20");
        jPanelMain.add(jTextFieldVpoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 30, -1));

        jLabel1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel1.setText("起始状态：");
        jPanelMain.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, -1, -1));

        jComboBoxStartStatus.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jComboBoxStartStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "主上升", "主下降" }));
        jComboBoxStartStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStartStatusActionPerformed(evt);
            }
        });
        jPanelMain.add(jComboBoxStartStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, -1, -1));

        jTextAreaMain.setColumns(20);
        jTextAreaMain.setRows(5);
        jScrollPane2.setViewportView(jTextAreaMain);

        jPanelMain.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 650, 80));

        getContentPane().add(jPanelMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 420));

        jMenuFile.setText("文件");

        jMenuItemImport.setText("导入...");
        jMenuItemImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemImportActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemImport);

        jMenuBar1.add(jMenuFile);

        jMenu2.setText("添加");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadActionPerformed
        String s;
        String[] ss = null;

        try {
            if (fileOpened == false) {
                reset();
                fileReader = new FileReader(fileIn);
                bufferedReader = new BufferedReader(fileReader);
                fileOpened = true;
                bufferedReader.readLine();
                bufferedReader.readLine();
            }

            do {
                if ((s = bufferedReader.readLine()) != null) {
                    ss = s.split("\t");
                }
            } while (((s != null) && ss[0].compareTo(jTextFieldStartDate.getText()) < 0));

            if (s != null) {
                updateMarket(s);
                doModeComputing();
                updateTable();
                parseStatus();
            } else {
                JOptionPane.showMessageDialog(this, "对不起，没有更多的行情数据了！");
                fileReader.close();
                bufferedReader.close();
                fileOpened = false;
            }
        } catch (IOException e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_jButtonReadActionPerformed

    private void jButtonContinuousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonContinuousActionPerformed
        String s;
        String[] ss = null;

        if ((jTextFieldEndDate.getText().compareTo(jTextFieldStartDate.getText()) < 0)) {
            JOptionPane.showMessageDialog(this, "起始日期必须早于结束日期！");
            return;
        }

        try {
            reset();
            fileWriter = new FileWriter(fileOut);
            fileReader = new FileReader(fileIn);
            bufferedReader = new BufferedReader(fileReader);
            fileOpened = true;
            bufferedReader.readLine();
            bufferedReader.readLine();

            do {
                if ((s = bufferedReader.readLine()) != null) {
                    ss = s.split("\t");
                    if ((ss[0].compareTo(jTextFieldStartDate.getText()) >= 0) && (ss[0].compareTo(jTextFieldEndDate.getText()) <= 0)) {
                        updateMarket(s);
                        doModeComputing();
                    }
                }
            } while (((s != null) && ss[0].compareTo(jTextFieldEndDate.getText()) < 0));

            parseStatus();
            updateTable();

            bufferedReader.close();
            fileReader.close();
            fileOpened = false;
            fileWriter.flush();
            fileWriter.close();
            fileWriter = null;
        } catch (IOException e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_jButtonContinuousActionPerformed

    private void jMenuItemImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemImportActionPerformed
        dataImport();
    }//GEN-LAST:event_jMenuItemImportActionPerformed

    private void jComboBoxStartStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStartStatusActionPerformed
        Status = (jComboBoxStartStatus.getSelectedIndex() == 0) ? "mainRiseStatus" : "mainFallStatus";
        parseStatus();
    }//GEN-LAST:event_jComboBoxStartStatusActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        reset();
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportActionPerformed
        dataImport();
    }//GEN-LAST:event_jButtonImportActionPerformed

    private void jComboBoxModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxModeActionPerformed
        jLabelOpen.setForeground(new java.awt.Color(0, 0, 0));
        jLabelOpen.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelClose.setForeground(new java.awt.Color(0, 0, 0));
        jLabelClose.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelHigh.setForeground(new java.awt.Color(0, 0, 0));
        jLabelHigh.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelLow.setForeground(new java.awt.Color(0, 0, 0));
        jLabelLow.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelMA2.setForeground(new java.awt.Color(0, 0, 0));
        jLabelMA2.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelMA3.setForeground(new java.awt.Color(0, 0, 0));
        jLabelMA3.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelMA4.setForeground(new java.awt.Color(0, 0, 0));
        jLabelMA4.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelMA5.setForeground(new java.awt.Color(0, 0, 0));
        jLabelMA5.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelMA10.setForeground(new java.awt.Color(0, 0, 0));
        jLabelMA10.setFont(new java.awt.Font("微软雅黑", 0, 12));
        jLabelMA20.setForeground(new java.awt.Color(0, 0, 0));
        jLabelMA20.setFont(new java.awt.Font("微软雅黑", 0, 12));
        switch (jComboBoxMode.getSelectedIndex()) {
            case 0:
                jLabelClose.setForeground(new java.awt.Color(255, 0, 153));
                jLabelClose.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
            case 1:
                jLabelMA2.setForeground(new java.awt.Color(255, 0, 153));
                jLabelMA2.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
            case 2:
                jLabelMA3.setForeground(new java.awt.Color(255, 0, 153));
                jLabelMA3.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
            case 3:
                jLabelMA4.setForeground(new java.awt.Color(255, 0, 153));
                jLabelMA4.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
            case 4:
                jLabelMA5.setForeground(new java.awt.Color(255, 0, 153));
                jLabelMA5.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
            case 5:
                jLabelMA10.setForeground(new java.awt.Color(255, 0, 153));
                jLabelMA10.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
            case 6:
                jLabelMA20.setForeground(new java.awt.Color(255, 0, 153));
                jLabelMA20.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
            case 7:
                jLabelOpen.setForeground(new java.awt.Color(255, 0, 153));
                jLabelOpen.setFont(new java.awt.Font("微软雅黑", 1, 13));
                jLabelClose.setForeground(new java.awt.Color(255, 0, 153));
                jLabelClose.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
            case 8:
                jLabelHigh.setForeground(new java.awt.Color(255, 0, 153));
                jLabelHigh.setFont(new java.awt.Font("微软雅黑", 1, 13));
                jLabelLow.setForeground(new java.awt.Color(255, 0, 153));
                jLabelLow.setFont(new java.awt.Font("微软雅黑", 1, 13));
                break;
        }
    }//GEN-LAST:event_jComboBoxModeActionPerformed

    protected void dataImport() {
        JFileChooser chooser = new JFileChooser("data/");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Stock Data File (*.txt)", "txt");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Select Stock Data File");
        int ret = chooser.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            fileIn = chooser.getSelectedFile().getPath();
            fileOut = fileIn.substring(0, fileIn.length() - 4) + "_out.txt";

            try {
                File file = new File(fileIn);
                InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "gbk");
                BufferedReader br = new BufferedReader(isr);
                String[] s = br.readLine().split("\t");
                jLabelStockCode.setText("(" + s[0].replaceAll("[\\pP\\p{Punct}]", "") + ")");
                jLabelStockName.setText(s[1]);
                br.close();
                isr.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void Logger(String str) {
        if (fileWriter != null) {
            try {
                fileWriter.write(str + "\r\n");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    protected void reset() {
        riseKeyHead = 0;
        riseKeyFoot = 0;
        mainRiseVal = 0;
        normalRiseUVal = 0;
        normalFallUVal = 0;
        minorRiseUVal = 0;
        minorFallUVal = 0;
        fallKeyHead = 0;
        fallKeyFoot = 0;
        mainFallVal = 0;
        normalRiseDVal = 0;
        normalFallDVal = 0;
        minorRiseDVal = 0;
        minorFallDVal = 0;
        updateTable();

        Status = (jComboBoxStartStatus.getSelectedIndex() == 0) ? "mainRiseStatus" : "mainFallStatus";
        parseStatus();

        if (fileOpened) {
            try {
                bufferedReader.close();
                fileReader.close();
                fileOpened = false;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        jTextAreaMain.setText("");
    }

    protected void doModeComputing() {
        double data;
        switch (jComboBoxMode.getSelectedIndex()) {
            case 0:
                data = Double.parseDouble(closeString);
                Livermore(data);
            case 1:
                data = Double.parseDouble(ma2String);
                Livermore(data);
            case 2:
                data = Double.parseDouble(ma3String);
                Livermore(data);
            case 3:
                data = Double.parseDouble(ma4String);
                Livermore(data);
            case 4:
                data = Double.parseDouble(ma5String);
                Livermore(data);
            case 5:
                data = Double.parseDouble(ma10String);
                Livermore(data);
            case 6:
                data = Double.parseDouble(ma20String);
                Livermore(data);
            case 7:
                data = Double.parseDouble(openString);
                Livermore(data);
                data = Double.parseDouble(closeString);
                Livermore(data);
            case 8:
                data = Double.parseDouble(closeString.compareTo(openString) > 0 ? lowString : highString);
                Livermore(data);
                data = Double.parseDouble(closeString.compareTo(openString) > 0 ? highString : lowString);
                Livermore(data);
            default:
                data = Double.parseDouble(ma2String);
                Livermore(data);
        }
    }

    protected void parseStatus() {
        switch (Status) {
            case "mainRiseStatus":
                jLabelStatus.setText("主上升！");
                jLabelStatus.setForeground(new java.awt.Color(255, 0, 0));
                break;
            case "normalFallUStatus":
                jLabelStatus.setText("自然回撤");
                jLabelStatus.setForeground(new java.awt.Color(255, 51, 51));
                break;
            case "normalRiseUStatus":
                jLabelStatus.setText("自然回升");
                jLabelStatus.setForeground(new java.awt.Color(255, 51, 51));
                break;
            case "minorFallUStatus":
                jLabelStatus.setText("次级回撤");
                jLabelStatus.setForeground(new java.awt.Color(255, 153, 153));
                break;
            case "minorRiseUStatus":
                jLabelStatus.setText("次级回升");
                jLabelStatus.setForeground(new java.awt.Color(255, 153, 153));
                break;

            case "mainFallStatus":
                jLabelStatus.setText("主下降！");
                jLabelStatus.setForeground(new java.awt.Color(0, 153, 0));
                break;
            case "normalRiseDStatus":
                jLabelStatus.setText("自然回升");
                jLabelStatus.setForeground(new java.awt.Color(51, 255, 51));
                break;
            case "normalFallDStatus":
                jLabelStatus.setText("自然回撤");
                jLabelStatus.setForeground(new java.awt.Color(51, 255, 51));
                break;
            case "minorRiseDStatus":
                jLabelStatus.setText("次级回升");
                jLabelStatus.setForeground(new java.awt.Color(153, 255, 153));
                break;
            case "minorFallDStatus":
                jLabelStatus.setText("次级回撤");
                jLabelStatus.setForeground(new java.awt.Color(153, 255, 153));
                break;
            default:
                break;
        }
    }

    protected void updateMarket(String s) {
        String[] ss = s.split("\t");
        int len = ss.length;
        dateString = ss[0];
        openString = ss[1];
        highString = ss[2];
        lowString = ss[3];
        closeString = ss[4];
        ma2String = ss[len - 6];
        ma3String = ss[len - 5];
        ma4String = ss[len - 4];
        ma5String = ss[len - 3];
        ma10String = ss[len - 2];
        ma20String = ss[len - 1];

        jLabelDate.setText("日期：" + dateString);
        jLabelOpen.setText("开盘：" + openString);
        jLabelHigh.setText("最高：" + highString);
        jLabelLow.setText("最低：" + lowString);
        jLabelClose.setText("收盘：" + closeString);
        jLabelMA2.setText("MA2：" + ma2String);
        jLabelMA3.setText("MA3：" + ma3String);
        jLabelMA4.setText("MA4：" + ma4String);
        jLabelMA5.setText("MA5：" + ma5String);
        jLabelMA10.setText("MA10：" + ma10String);
        jLabelMA20.setText("MA20：" + ma20String);
    }

    protected void updateTable() {
        jTablePoint.setValueAt(riseKeyHead, 0, 1);
        jTablePoint.setValueAt(riseKeyFoot, 1, 1);
        jTablePoint.setValueAt(mainRiseVal, 2, 1);
        jTablePoint.setValueAt(normalFallUVal, 3, 1);
        jTablePoint.setValueAt(normalRiseUVal, 4, 1);
        jTablePoint.setValueAt(minorFallUVal, 5, 1);
        jTablePoint.setValueAt(minorRiseUVal, 6, 1);

        jTablePoint.setValueAt(fallKeyHead, 0, 3);
        jTablePoint.setValueAt(fallKeyFoot, 1, 3);
        jTablePoint.setValueAt(mainFallVal, 2, 3);
        jTablePoint.setValueAt(normalFallDVal, 3, 3);
        jTablePoint.setValueAt(normalRiseDVal, 4, 3);
        jTablePoint.setValueAt(minorFallDVal, 5, 3);
        jTablePoint.setValueAt(minorRiseDVal, 6, 3);
    }

    protected void statusRecord(String status) {
        jTextAreaMain.append("[" + dateString + "] " + status + "\n");
        Logger("[" + dateString + "] " + status);
        Logger("上关键点：" + riseKeyHead
                + "\t\t上关键点：" + fallKeyHead
                + "\r\n下关键点：" + riseKeyFoot
                + "\t\t下关键点：" + fallKeyFoot
                + "\r\n主上升值：" + mainRiseVal
                + "\t\t主下降值：" + mainFallVal
                + "\r\n自然回撤：" + normalFallUVal
                + "\t\t自然回撤：" + normalFallDVal
                + "\r\n自然回升：" + normalRiseUVal
                + "\t\t自然回升：" + normalRiseDVal
                + "\r\n次级回撤：" + minorFallUVal
                + "\t\t次级回撤：" + minorFallDVal
                + "\r\n次级回升：" + minorRiseUVal
                + "\t\t次级回升：" + minorRiseDVal + "\r\n");
    }

    protected void resetTrendValue() {
        switch (Status) {
            case "mainRiseStatus":
                riseKeyHead = 0;
                riseKeyFoot = 0;
                mainRiseVal = 0;
                normalRiseUVal = 0;
                normalFallUVal = 0;
                minorRiseUVal = 0;
                minorFallUVal = 0;
                break;
            case "mainFallStatus":
                fallKeyHead = 0;
                fallKeyFoot = 0;
                mainFallVal = 0;
                normalRiseDVal = 0;
                normalFallDVal = 0;
                minorRiseDVal = 0;
                minorFallDVal = 0;
                break;
            default:
                break;
        }
    }

    protected void Livermore(double d) {
        boolean vpointEnable = jCheckBoxVpoint.isSelected();
        int vpointValue = Integer.parseInt(jTextFieldVpoint.getText());

        switch (Status) {
            case "mainRiseStatus":
                if (d > mainRiseVal) {
                    mainRiseVal = d;
                } else if (d < (mainRiseVal * 0.9)) {
                    Status = "normalFallUStatus";
                    normalFallUVal = d;
                    riseKeyHead = mainRiseVal;
                    statusRecord("进入自然回撤（上升）");
                }
                break;
            case "normalFallUStatus":
                if (d < riseKeyFoot * 0.95) {
                    Status = "mainFallStatus";
                    resetTrendValue();
                    mainFallVal = d;
                    statusRecord("进入下降趋势！！！");
                } else if (d < normalFallUVal) {
                    if ((vpointEnable) && (d < riseKeyHead * (100 - vpointValue) / 100)) {
                        Status = "mainFallStatus";
                        resetTrendValue();
                        mainFallVal = d;
                        statusRecord("进入下降趋势（V形反转）！！！");
                    } else {
                        normalFallUVal = d;
                    }
                } else if (d > (normalFallUVal * 1.1)) {
                    Status = "normalRiseUStatus";
                    normalRiseUVal = d;
                    riseKeyFoot = normalFallUVal;
                    statusRecord("进入自然回升（上升）");
                }
                break;
            case "normalRiseUStatus":
                if (d > mainRiseVal) {
                    Status = "mainRiseStatus";
                    mainRiseVal = d;
                    statusRecord("恢复上升趋势！！！");
                } else if (d > normalRiseUVal) {
                    normalRiseUVal = d;
                } else if ((d >= (normalRiseUVal * 0.9)) && (d < (normalRiseUVal * 0.95))) {
                    statusRecord("注意：上升趋势可能会改变！");
                } else if (d < (normalRiseUVal * 0.9)) {
                    if (d < riseKeyFoot * 0.95) {
                        Status = "mainFallStatus";
                        resetTrendValue();
                        mainFallVal = d;
                        statusRecord("进入下降趋势！！！");
                    } else if (d < normalFallUVal) {
                        Status = "normalFallUStatus";
                        normalFallUVal = d;
                        statusRecord("进入自然回撤（上升）");
                    } else {
                        Status = "minorFallUStatus";
                        minorFallUVal = d;
                        statusRecord("进入次级回撤（上升）");
                    }
                }
                break;
            case "minorFallUStatus":
                if (d < riseKeyFoot * 0.95) {
                    Status = "mainFallStatus";
                    resetTrendValue();
                    mainFallVal = d;
                    statusRecord("进入下降趋势！！！");
                } else if (d < normalFallUVal) {
                    Status = "normalFallUStatus";
                    normalFallUVal = d;
                    statusRecord("进入自然回撤（上升）");
                } else if (d < minorFallUVal) {
                    minorFallUVal = d;
                } else if (d > minorFallUVal * 1.1) {
                    if (d > mainRiseVal) {
                        Status = "mainRiseStatus";
                        mainRiseVal = d;
                        statusRecord("恢复上升趋势！！！");
                    } else if (d > normalRiseUVal) {
                        Status = "normalRiseUStatus";
                        normalRiseUVal = d;
                        statusRecord("进入自然回升（上升）");
                    } else {
                        Status = "minorRiseUStatus";
                        minorRiseUVal = d;
                        statusRecord("进入次级回升（上升）");
                    }
                }
                break;
            case "minorRiseUStatus":
                if (d > mainRiseVal) {
                    Status = "mainRiseStatus";
                    mainRiseVal = d;
                    statusRecord("恢复上升趋势！！！");
                } else if (d > normalRiseUVal) {
                    Status = "normalRiseUStatus";
                    normalRiseUVal = d;
                    statusRecord("进入自然回升（上升）");
                } else if (d > minorRiseUVal) {
                    minorRiseUVal = d;
                } else if (d < minorRiseUVal * 0.9) {
                    if (d < riseKeyFoot * 0.95) {
                        Status = "mainFallStatus";
                        resetTrendValue();
                        mainFallVal = d;
                        statusRecord("进入下降趋势");
                    } else if (d < normalFallUVal) {
                        Status = "normalFallUStatus";
                        normalFallUVal = d;
                        statusRecord("进入自然回撤（上升）");
                    } else {
                        Status = "minorFallUStatus";
                        minorFallUVal = d;
                        statusRecord("进入次级回撤（上升）");
                    }
                }
                break;

            case "mainFallStatus":
                if ((d < mainFallVal) || (mainFallVal == 0)) {
                    mainFallVal = d;
                } else if (d > (mainFallVal * 1.1)) {
                    Status = "normalRiseDStatus";
                    normalRiseDVal = d;
                    fallKeyFoot = mainFallVal;
                    statusRecord("进入自然回升（下降）");
                }
                break;
            case "normalRiseDStatus":
                if ((fallKeyHead != 0) && (d > fallKeyHead * 1.05)) {
                    Status = "mainRiseStatus";
                    resetTrendValue();
                    mainRiseVal = d;
                    statusRecord("进入上升趋势！！！");
                } else if (d > normalRiseDVal) {
                    if ((vpointEnable) && (d > fallKeyFoot * (100 + vpointValue) / 100)) {
                        Status = "mainRiseStatus";
                        resetTrendValue();
                        mainRiseVal = d;
                        statusRecord("进入上升趋势（V形反转）！！！");
                    } else {
                        normalRiseDVal = d;
                    }
                } else if (d < (normalRiseDVal * 0.9)) {
                    Status = "normalFallDStatus";
                    normalFallDVal = d;
                    fallKeyHead = normalRiseDVal;
                    statusRecord("进入自然回撤（下降）");
                }
                break;
            case "normalFallDStatus":
                if (d < mainFallVal) {
                    Status = "mainFallStatus";
                    mainFallVal = d;
                    statusRecord("恢复下降趋势！！！");
                } else if (d < normalFallDVal) {
                    normalFallDVal = d;
                } else if ((d <= (normalFallDVal * 1.1)) && (d > (normalFallDVal * 1.05))) {
                    statusRecord("注意：下降趋势可能会改变！");
                } else if (d > (normalFallDVal * 1.1)) {
                    if (d > fallKeyHead * 1.05) {
                        Status = "mainRiseStatus";
                        resetTrendValue();
                        mainRiseVal = d;
                        statusRecord("进入上升趋势！！！");
                    } else if (d > normalRiseDVal) {
                        Status = "normalRiseDStatus";
                        normalRiseDVal = d;
                        statusRecord("进入自然回升（下降）");
                    } else {
                        Status = "minorRiseDStatus";
                        minorRiseDVal = d;
                        statusRecord("进入次级回升（下降）");
                    }
                }
                break;
            case "minorRiseDStatus":
                if (d > fallKeyHead * 1.05) {
                    Status = "mainRiseStatus";
                    resetTrendValue();
                    mainRiseVal = d;
                    statusRecord("进入上升趋势！！！");
                } else if (d > normalRiseDVal) {
                    Status = "normalRiseDStatus";
                    normalRiseDVal = d;
                    statusRecord("进入自然回升（下降）");
                } else if (d > minorRiseDVal) {
                    minorRiseDVal = d;
                } else if (d < minorRiseDVal * 0.9) {
                    if (d < mainFallVal) {
                        Status = "mainFallStatus";
                        mainFallVal = d;
                        statusRecord("恢复下降趋势！！！");
                    } else if (d < normalFallDVal) {
                        Status = "normalFallDStatus";
                        normalFallDVal = d;
                        statusRecord("进入自然回撤（下降）");
                    } else {
                        Status = "minorFallDStatus";
                        minorFallDVal = d;
                        statusRecord("进入次级回撤（下降）");
                    }
                }
                break;
            case "minorFallDStatus":
                if (d < mainFallVal) {
                    Status = "mainFallStatus";
                    mainFallVal = d;
                    statusRecord("恢复下降趋势！！！");
                } else if (d < normalFallDVal) {
                    Status = "normalFallDStatus";
                    normalFallDVal = d;
                    statusRecord("进入自然回撤（下降）");
                } else if (d < minorFallDVal) {
                    minorFallDVal = d;
                } else if (d > minorFallDVal * 1.1) {
                    if (d > fallKeyHead * 1.05) {
                        Status = "mainRiseStatus";
                        resetTrendValue();
                        mainRiseVal = d;
                        statusRecord("进入上升趋势！！！");
                    } else if (d > normalRiseDVal) {
                        Status = "normalRiseDStatus";
                        normalRiseDVal = d;
                        statusRecord("进入自然回升（下降）");
                    } else {
                        Status = "minorRiseDStatus";
                        minorRiseDVal = d;
                        statusRecord("进入次级回升（下降）");
                    }
                }
                break;
            default:
                break;
        }
    }

    private double mainRiseVal = 0;
    private double mainFallVal = 0;
    private double normalRiseUVal = 0;
    private double normalFallUVal = 0;
    private double normalRiseDVal = 0;
    private double normalFallDVal = 0;
    private double minorRiseUVal = 0;
    private double minorFallUVal = 0;
    private double minorRiseDVal = 0;
    private double minorFallDVal = 0;

    private double riseKeyHead = 0;
    private double riseKeyFoot = 0;
    private double fallKeyHead = 0;
    private double fallKeyFoot = 0;

    private String dateString = "";
    private String openString = "";
    private String closeString = "";
    private String highString = "";
    private String lowString = "";
    private String ma2String = "";
    private String ma3String = "";
    private String ma4String = "";
    private String ma5String = "";
    private String ma10String = "";
    private String ma20String = "";

    private String Status = "mainRiseStatus";
    private String fileIn = "data\\000001.txt";
    private String fileOut = "data\\000001_out.txt";
    public FileReader fileReader;
    public FileWriter fileWriter;
    public BufferedReader bufferedReader;
    boolean readFlag = false;
    private boolean fileOpened = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonContinuous;
    private javax.swing.JButton jButtonImport;
    private javax.swing.JButton jButtonRead;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JCheckBox jCheckBoxVpoint;
    private javax.swing.JComboBox<String> jComboBoxMode;
    private javax.swing.JComboBox<String> jComboBoxStartStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelHigh;
    private javax.swing.JLabel jLabelLow;
    private javax.swing.JLabel jLabelMA10;
    private javax.swing.JLabel jLabelMA2;
    private javax.swing.JLabel jLabelMA20;
    private javax.swing.JLabel jLabelMA3;
    private javax.swing.JLabel jLabelMA4;
    private javax.swing.JLabel jLabelMA5;
    private javax.swing.JLabel jLabelOpen;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelStockCode;
    private javax.swing.JLabel jLabelStockName;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemImport;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelPrice;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePoint;
    private javax.swing.JTextArea jTextAreaMain;
    private javax.swing.JTextField jTextFieldEndDate;
    private javax.swing.JTextField jTextFieldStartDate;
    private javax.swing.JTextField jTextFieldVpoint;
    // End of variables declaration//GEN-END:variables
}
